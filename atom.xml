<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Brady</title>
  <subtitle>Focus</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://kangbiao.org/"/>
  <updated>2018-09-04T13:22:11.454Z</updated>
  <id>http://kangbiao.org/</id>
  
  <author>
    <name>Brady</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>photoPostName</title>
    <link href="http://kangbiao.org/2018/09/04/photoPostName/"/>
    <id>http://kangbiao.org/2018/09/04/photoPostName/</id>
    <published>2018-09-04T13:22:11.000Z</published>
    <updated>2018-09-04T13:22:11.454Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>本地日志分析上报脚本实现思路梳理</title>
    <link href="http://kangbiao.org/2016/07/16/logAgent/"/>
    <id>http://kangbiao.org/2016/07/16/logAgent/</id>
    <published>2016-07-16T11:39:22.000Z</published>
    <updated>2016-07-30T09:26:46.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><blockquote>
<p>目前我们部门的日志查询只能通过开发人员登录对应的机器执行日志分析，效率不够高效。对于现网问题，由于运维不理解后台模块的日志含义，因此只能由开发去现网机器查询日志；对于联调环境，接入方调用接口出了问题只能通过我们部门后台开发人员协助解决。这种强依赖指定开发人员的情况，不利于问题的快速解决。因此我们迫切的需要一个日志中心来处理和查询所有的日志，并且由于需要在联调时能够让接入方自己定位问题，我们对实时性也有一定的要求。但是由于公司没有提供这种系统，所以我们决定自己做一个日志模块来处理上述问题。<br>这篇文章主要是写一下日志模块客户端的实现思路，对于日志存储查询服务由于不是我开发，所以只做简单介绍。</p>
</blockquote>
<h2 id="在模块内部实现"><a href="#在模块内部实现" class="headerlink" title="在模块内部实现"></a>在模块内部实现</h2><p>最开始的实现方式是修改业务逻辑代码，在需要上报日志的地方增加日志上报逻辑，但是由于php语言不支持装饰器和注解这样的语法，因此这样的实现对于业务代码的入侵度极高，同时需要大量修改业务代码已有的处理流程，也存在着很大的风险。同时由于增加了日志上报逻辑，因此多了一次网络调用，如果日志服务存在故障，那么网络调用超时会影响业务逻辑，这是很不合理的实现方案，因此我这样写了两天代码就写不下去了。</p>
<h2 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h2><p>后来看了下CI框架的文档，发现CI也支持钩子语法，因此可以通过设置一个全局的钩子来实现对关键日志的监控，所谓钩子，其实就是框架主流程埋几个点，这样你就可以在框架执行流程中增加自己的逻辑来影响框架执行流程，我当时挂钩点是控制器初始化完成，但调用构造器之前。这样的实现看起来很简单，也减少了代码入侵，但是仅仅是减少代码入侵而已，对于所有的流程还是会经过日志判断，运行流程上面还是和最开始的实现方式一样，是全局的。另外一点很不好的地方就是需要设置几个全局变量来存储一些钩子获取不到的数据，如网络调用，这样对于后来的维护者很难理解为什么这里会有一个全局变量赋值，然后就吐槽一番这个代码顺便删除，然后我们的日志监控就呵呵了。因此这样的实现方案也是不太好的。所以我把代码回滚，放弃了这种做法。。</p>
<h2 id="通过本地日志agent脚本实现"><a href="#通过本地日志agent脚本实现" class="headerlink" title="通过本地日志agent脚本实现"></a>通过本地日志agent脚本实现</h2><p><strong>接下来就是本文的重点啦~</strong></p>
<p>最后决定通过本地写个脚本来实时分析日志并且上传到日志模块来实现日志的监控。这个方案是我认为最合理的方案，同时也是很多企业的做法。实现方案确定好了以后，接下来的就是评估技术方案了。</p>
<p><strong>python脚本循环读取日志存储目录实现监控</strong><br>先看一下一天产生的日志总量：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">[bradykang@10_113_88_21 /data/<span class="built_in">log</span>/trade]$ du -ch ./trade_20160716_* | grep total</div><div class="line">14G	total</div><div class="line">[bradykang@10_113_88_21 /data/<span class="built_in">log</span>/trade]$ du -ch ./trade_20160715_* | grep total</div><div class="line">17G	total</div><div class="line">[bradykang@10_113_88_21 /data/<span class="built_in">log</span>/trade]$ du -ch ./trade_20160714_* | grep total</div><div class="line">16G	total</div><div class="line">[bradykang@10_113_88_21 /data/<span class="built_in">log</span>/trade]$ du -ch ./trade_20160713_* | grep total</div><div class="line">15G	total</div><div class="line">[bradykang@10_113_88_21 /data/<span class="built_in">log</span>/trade]$ du -ch ./trade_20160712_* | grep total</div><div class="line">14G	total</div><div class="line">[bradykang@10_113_88_21 /data/<span class="built_in">log</span>/trade]$ du -ch ./trade_20160711_* | grep total</div><div class="line">15G	total</div><div class="line"></div><div class="line">[bradykang@10_204_187_173 /data/<span class="built_in">log</span>/trade]$ du -ch ./trade_20160716_* | grep total</div><div class="line">8.6G	total</div><div class="line">[bradykang@10_204_187_173 /data/<span class="built_in">log</span>/trade]$ du -ch ./trade_20160715_* | grep total</div><div class="line">9.5G	total</div><div class="line">[bradykang@10_204_187_173 /data/<span class="built_in">log</span>/trade]$ du -ch ./trade_20160714_* | grep total</div><div class="line">11G	total</div><div class="line">[bradykang@10_204_187_173 /data/<span class="built_in">log</span>/trade]$ du -ch ./trade_20160713_* | grep total</div><div class="line">9.6G	total</div><div class="line">[bradykang@10_204_187_173 /data/<span class="built_in">log</span>/trade]$ du -ch ./trade_20160712_* | grep total</div><div class="line">8.4G	total</div><div class="line">[bradykang@10_204_187_173 /data/<span class="built_in">log</span>/trade]$ du -ch ./trade_20160711_* | grep total</div><div class="line">8.8G	total</div><div class="line"></div><div class="line">[bradykang@10_204_238_40 /data/<span class="built_in">log</span>/trade]$ du -ch ./trade_20160716_* | grep total</div><div class="line">20K	total</div><div class="line">[bradykang@10_204_238_40 /data/<span class="built_in">log</span>/trade]$ du -ch ./trade_20160715_* | grep total</div><div class="line">43M	total</div><div class="line">[bradykang@10_204_238_40 /data/<span class="built_in">log</span>/trade]$ du -ch ./trade_20160714_* | grep total</div><div class="line">50M	total</div><div class="line">[bradykang@10_204_238_40 /data/<span class="built_in">log</span>/trade]$ du -ch ./trade_20160713_* | grep total</div><div class="line">156M	total</div><div class="line">[bradykang@10_204_238_40 /data/<span class="built_in">log</span>/trade]$ du -ch ./trade_20160712_* | grep total</div><div class="line">499M	total</div><div class="line">[bradykang@10_204_238_40 /data/<span class="built_in">log</span>/trade]$ du -ch ./trade_20160711_* | grep total</div><div class="line">241M	total</div></pre></td></tr></table></figure></p>
<p>综上统计：三台机器一天的日志产生量在25G左右。这还只是一个在模块一天的日志产生量，所有模块加起来的话应该在百G以上。<strong>所以要实时监控性能很重要</strong></p>
<p>之前有位大神给我讲过他之前是怎么做一个日志监控的，他当时告诉我是本地写了一个脚本来实现，所以我第一想法就是写个python脚本。但是写了一段时间发现越写越没谱，主要是因为现网的日志一天的量是以T为单位，而我的逻辑里面包含了很多的文件IO(因为要实时监控，所以要一直读取文件夹监控内部的变化)。所以这样做的话，很可能会出现分析跟不上产生的节奏，这样实时性很差且会产生一定的系统负载，因此这种实现被放弃了。</p>
<p>后来想了想，突然记起之前在学校做得一个项目，项目里面有个知识点是关于linux文件系统监控的，即linux文件系统的inotify机制，关于该机制的介绍我就不做过多篇幅的描述了，参见这篇wiki<a href="https://en.wikipedia.org/wiki/Inotify" target="_blank" rel="external">inotify</a>。</p>
<p>所以我完全可以去网上下个python实现的文件系统notify库，然后就可以很方便的监控到文件系统的变化了。但是突然想起后面还有那么多的字符分析，好像用python的话性能不能满足我们对实时性要求高的需求，因此我决定使用shell命令来做这个脚本。那些设计优美且性能高效的文本分析命令完全可以很方便的实现我对于日志分析的要求。而且这样我的全部工作就是组装命令，维护日志分析的主逻辑了。</p>
<p><strong>shell通过notify_tools实现日志分析</strong><br>shell实现有几个技术问题需要解决，第一是文本处理命令的选择；第二是notify_tools是否真能满足要求；第三则是性能测试了</p>
<p><em>文本命令的选择</em><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 普通字符过滤性能比较</span></div><div class="line">[root@mcs/data/<span class="built_in">log</span>/trade.logical]<span class="comment"># time grep ".*atom" log-2016-07-16.log&gt;/dev/null</span></div><div class="line">real	0m0.194s</div><div class="line">user	0m0.188s</div><div class="line">sys	0m0.004s</div><div class="line"></div><div class="line">[root@mcs /data/<span class="built_in">log</span>/trade.logical]<span class="comment"># time sed "/.*atom/p" log-2016-07-16.log&gt;/dev/null</span></div><div class="line">real	0m0.201s</div><div class="line">user	0m0.192s</div><div class="line">sys	0m0.008s</div><div class="line"></div><div class="line">[root@mcs/data/<span class="built_in">log</span>/trade.logical]<span class="comment"># time awk "/.*atom/" log-2016-07-16.log&gt;/dev/null</span></div><div class="line">real	0m1.502s</div><div class="line">user	0m1.484s</div><div class="line">sys	0m0.016s</div></pre></td></tr></table></figure></p>
<p>可以看出来这三者的性能排序为grep&gt;sed&gt;awk，awk基本不考虑使用了，最然它给我们提供了可编程的空间，但是太慢了。至于最快的grep，由于它在命令上支持不够丰富，所以也不考虑使用。因此选取性能和功能相对而言优于其他两者的sed命令。<br>当然，这只是一个简单的测试，由于我缺乏对这三个命令高级选项的认识，因此这三个命令在加了高级选项以后的性能排序可能有所不同。但是对目前的需求而言，执行这样的测试然后选择sed是没有问题的。</p>
<p><em>notify_tools是否满足要求</em><br>这个就简单了，通过执行man inotifywait看了下文档，发现这个工具是满足我们的要求的</p>
<p><em>性能测试</em><br>待补充….</p>
<h2 id="shell脚本实现方案"><a href="#shell脚本实现方案" class="headerlink" title="shell脚本实现方案"></a>shell脚本实现方案</h2><p>有几点需要首先明确，这个日志分析脚本由于是在本机运行，所以必然会部署多份，虽然我们部门只有几台服务器，但也勉强算个分布式了==。所以脚本的运行应该足够简单，所以决定通过配置文件来控制脚本的运行。</p>
<p>另外一点就是如何保证日志文件都是被处理完了，不会出现漏处理或者处理速度跟不上的问题。这个的实现我是通过维护一个处理偏移量的文件来记录脚本处理的文件位置信息，方便脚本中断后能够从上次的处理位置继续处理。</p>
<p>由于一次产生的日志量很大，所以不能够一行一行的处理，这样或许能够跟上日志的产生速度，但是不太合理，我采用的方案如下：</p>
<ol>
<li>循环的执行监听命令，当收到文件变化的通知后便立刻进行处理</li>
<li>如果通知的变化文件和偏移量中记录的文件一致，则计算出当前文件总行数（主要是为了避免一直变化的行数造成处理混乱），从上次记录的偏移量处理到当前文件的总行数</li>
<li>如果通知的变化文件和偏移量中记录的文件不一致，这个时候说明发生了新建日志文件的动作，则一次性处理完偏移量文件中记录的文件的剩下的所有内容，并且开始处理新创建的日志文件</li>
<li>更新偏移量和指向文件</li>
</ol>
<p>这样的实现有个特点就是，在日至量增加特别特别快的情况下（万行每秒），处理脚本可能会出现延后，且日志增量如果不降下去，处理会越来越延后，但是当新建文件时，脚本会一次性将所有延后处理的日志一次性全部处理了，通过动态获取处理量来避免大量日志产生对于实时性的降低。</p>
<p>当然缺点也是很明显的，如果日志量增加的速率一直增加，那么日志处理肯定是会有延后的，同时如果是通过调用接口上报日志的话，日志仍然会有几秒甚至几十秒左右的延后。但是对于我们的系统，目前这样实现是够用了，业务量上去还可以通过优化脚本和优化日志服务的方式来提高日志的处理速度。对于联调环境的日志量，这样的实现完全可以胜任。</p>
<p>接下来的事情就是让时间去验证这样实现的优缺点。</p>
<p><strong>后续改进方案</strong></p>
<ol>
<li>目前这个脚本的耗时主要在日志的网络传输上（即传到日志中心的这个过程），采用的直接插入数据库或者调用接口。</li>
<li>日志中心废弃数据库的存储方式，采用更适合文本检索的文件存储方式来分析存储日志。</li>
<li>本地不再分析日志，只负责将日志提取出来发送给日至中心，分析由日至中心处理完成，但是降低了实时性。</li>
<li>传输协议上面可以用thrift协议，而不是现在的http协议或者直插数据库。</li>
<li>规范化系统后台日志格式，提高程序的整洁和日志信息的可读性。</li>
</ol>
<p>最后贴一段脚本的部分代码来凑凑篇幅<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/bin/sh</span></div><div class="line"></div><div class="line"><span class="comment"># 偏移量文件格式：偏移量 指向文件</span></div><div class="line"></div><div class="line">configFile=<span class="variable">$1</span></div><div class="line"><span class="built_in">declare</span> <span class="_">-a</span> configArr</div><div class="line"></div><div class="line"><span class="keyword">while</span> IFS=<span class="string">''</span> <span class="built_in">read</span> -r line || [[ -n <span class="string">"<span class="variable">$line</span>"</span> ]]; <span class="keyword">do</span></div><div class="line">   IFS=<span class="string">'='</span> <span class="built_in">read</span> -r key value &lt;&lt;&lt; <span class="string">"<span class="variable">$line</span>"</span></div><div class="line">   configArr[<span class="variable">$key</span>]=<span class="variable">$value</span></div><div class="line"><span class="keyword">done</span> &lt; <span class="string">"<span class="variable">$configFile</span>"</span></div><div class="line"><span class="built_in">echo</span> <span class="_">-e</span> <span class="string">"parse config file succ \n\nstart watch log file[log path:<span class="variable">$&#123;configArr['logCategoryPath']&#125;</span>]\n"</span></div><div class="line"></div><div class="line"><span class="keyword">while</span> watchInfo=`inotifywait -q --format <span class="string">'%e %f'</span> <span class="_">-e</span> modify,create <span class="variable">$&#123;configArr['logCategoryPath']&#125;</span>`;<span class="keyword">do</span></div><div class="line">	watchInfo=(<span class="variable">$watchInfo</span>)</div><div class="line">	lines=`wc <span class="_">-l</span> <span class="variable">$&#123;watchInfo[1]&#125;</span>`</div><div class="line">	offsetInfo=`cat <span class="variable">$&#123;configArr['offsetFilePath']&#125;</span>`</div><div class="line">	<span class="comment"># 如果偏移量文件不存在，则创建偏移量文件</span></div><div class="line">	<span class="keyword">if</span> [ $? ]; <span class="keyword">then</span></div><div class="line">		<span class="comment"># 如果偏移量记录文件为空，则初始化偏移量，从第0行读取变更的文件</span></div><div class="line">		<span class="keyword">if</span> [ <span class="variable">$offsetInfo</span> <span class="_">-eq</span> <span class="string">""</span> ]; <span class="keyword">then</span></div><div class="line">			process 1 <span class="variable">$&#123;lines&#125;</span> <span class="variable">$watchInfo</span>[1]</div><div class="line">		<span class="comment"># 如果偏移量文件不为空，则取出偏移量和指向的文件</span></div><div class="line">		<span class="keyword">else</span></div><div class="line">			offsetInfo=(<span class="variable">$offsetInfo</span>)</div><div class="line">			<span class="keyword">if</span> [ <span class="variable">$&#123;offsetInfo[1]&#125;</span> <span class="_">-eq</span> <span class="variable">$&#123;watchInfo[1]&#125;</span> ]; <span class="keyword">then</span></div><div class="line">				<span class="comment"># 处理上一个日志文件</span></div><div class="line">				process <span class="variable">$&#123;offset&#125;</span> $ <span class="variable">$offsetFile</span> </div><div class="line">				<span class="comment"># 处理从第0行开始处理新创建的文件</span></div><div class="line">				process 1 <span class="variable">$&#123;lines&#125;</span> <span class="variable">$watchInfo</span>[1]</div><div class="line">			<span class="keyword">else</span></div><div class="line">				<span class="comment"># 继续处理偏移量文件中记录的文件</span></div><div class="line">				process <span class="variable">$&#123;offset&#125;</span> <span class="variable">$&#123;lines&#125;</span> <span class="variable">$watchInfo</span>[1]</div><div class="line">			<span class="keyword">fi</span></div><div class="line">		<span class="keyword">fi</span></div><div class="line">		<span class="comment"># 处理完成，更新偏移量和指向的文件</span></div><div class="line">		cat <span class="string">"<span class="variable">$lines</span> <span class="variable">$&#123;watchInfo[1]&#125;</span>"</span> &gt; <span class="variable">$&#123;configArr['offsetFilePath']&#125;</span></div><div class="line">	<span class="keyword">else</span></div><div class="line">		touch <span class="variable">$&#123;configArr['offsetFilePath']&#125;</span></div><div class="line">	<span class="keyword">fi</span></div><div class="line"><span class="keyword">done</span></div></pre></td></tr></table></figure></p>
<h2 id="目前实现方案"><a href="#目前实现方案" class="headerlink" title="目前实现方案"></a>目前实现方案</h2><p>在联调环境中的试运行发现shell实现扩展性，维护性和可操作性都比较差，因此换用python实现，采用多线程和子进程的方式实现，同时对于协议的支持也更加完善，配置也支持更多选项。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;目前我们部门的日志查询只能通过开发人员登录对应的机器执行日志分析，效率不够高效。对于现网问题，由于运维不理解后台模
    
    </summary>
    
      <category term="服务器" scheme="http://kangbiao.org/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    
      <category term="shell" scheme="http://kangbiao.org/tags/shell/"/>
    
      <category term="notify" scheme="http://kangbiao.org/tags/notify/"/>
    
  </entry>
  
  <entry>
    <title>web开发中的浏览器跨域整理</title>
    <link href="http://kangbiao.org/2016/07/15/cors_summary/"/>
    <id>http://kangbiao.org/2016/07/15/cors_summary/</id>
    <published>2016-07-15T14:40:44.000Z</published>
    <updated>2016-08-24T09:22:14.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="HTTP访问控制-CORS"><a href="#HTTP访问控制-CORS" class="headerlink" title="HTTP访问控制(CORS)"></a>HTTP访问控制(CORS)</h2><p><strong>同源策略</strong><br>同源政策的目的，是为了保证用户信息的安全，防止恶意的网站窃取数据。<br>设想这样一种情况：A网站是一家银行，用户登录以后，又去浏览其他网站。如果其他网站可以读取A网站的 Cookie，会发生什么？<br>很显然，如果 Cookie 包含隐私（比如存款总额），这些信息就会泄漏。更可怕的是，Cookie 往往用来保存用户的登录状态，如果用户没有退出登录，其他网站就可以冒充用户，为所欲为。因为浏览器同时还规定，提交表单不受同源政策的限制。<br>由此可见，”同源政策”是必需的，否则 Cookie 可以共享，互联网就毫无安全可言了。<br><strong>为什么不能跨域访问</strong><br>跨域并非浏览器限制了发起跨站请求，而是跨站请求可以正常发起，但是返回结果被浏览器拦截了。最好的例子是CSRF跨站攻击原理，无论是否跨域，请求是发送到了后端服务器，注意：有些浏览器不允许从HTTPS的域跨域访问HTTP，比如Chrome和Firefox，这些浏览器在请求还未发出的时候就会拦截请求，这是一个特例。所以只有服务器允许跨域，并且在相应包的头信息里面指明允许跨域，那么跨域请求的响应数据就不会被浏览器拦截丢弃了。</p>
<h2 id="什么是跨域"><a href="#什么是跨域" class="headerlink" title="什么是跨域"></a>什么是跨域</h2><table>
<thead>
<tr>
<th>URL1</th>
<th>URL2</th>
<th>是否跨域</th>
<th>原因</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="http://kangbiao.org/index">http://kangbiao.org/index</a></td>
<td><a href="https://kangbiao.org/index">https://kangbiao.org/index</a></td>
<td>是</td>
<td>协议不同</td>
</tr>
<tr>
<td><a href="http://kangbiao.org/index">http://kangbiao.org/index</a></td>
<td><a href="http://kangbiao.org:8080/index">http://kangbiao.org:8080/index</a></td>
<td>是</td>
<td>端口号不同</td>
</tr>
<tr>
<td><a href="http://kangbiao.org/index">http://kangbiao.org/index</a></td>
<td><a href="http://baidu.org/index" target="_blank" rel="external">http://baidu.org/index</a></td>
<td>是</td>
<td>主机不同</td>
</tr>
<tr>
<td><a href="http://kangbiao.org/index">http://kangbiao.org/index</a></td>
<td><a href="http://t1.kangbiao.org/index" target="_blank" rel="external">http://t1.kangbiao.org/index</a></td>
<td>是</td>
<td>主机不同</td>
</tr>
</tbody>
</table>
<p>通过上面的比较可以归纳出，跨域是指协议、主机地址、端口号这三个条件只要有一个不同则认为是跨域。</p>
<h2 id="六种跨域方式"><a href="#六种跨域方式" class="headerlink" title="六种跨域方式"></a>六种跨域方式</h2><h3 id="通过浏览器对象解决"><a href="#通过浏览器对象解决" class="headerlink" title="通过浏览器对象解决"></a>通过浏览器对象解决</h3><p><strong>document.domain(适用于子域跨域)</strong><br>在同源策略中有一个例外，脚本可以设置 <a href="https://developer.mozilla.org/zh-CN/DOM/document.domain" target="_blank" rel="external">document.domain</a><br> 的值为当前域的一个后缀，如果这样做的话，短的域将作为后续同源检测的依据。例如，假设在 <a href="http://t1.kangbiao.org/index" target="_blank" rel="external">http://t1.kangbiao.org/index</a> 中的一个js脚本执行了下列语句：<br>document.domain = “kanbgiao.org”;<br>这条语句执行之后，页面将会成功地通过对 <a href="http://company.com/index" target="_blank" rel="external">http://company.com/index</a><br> 的同源检测。但是不能通过设置 document.domain = “notkangbiao.org”;完成对其他域的访问，该方法只适用于子域和父域之间的跨域解决。</p>
<blockquote>
<p>使用document.domain来让子域安全地访问其父域，需要同时将子域和父域的document.domain设置为相同的值，没有这么做的话会导致授权错误。</p>
</blockquote>
<p><strong>window.name</strong><br>这种方案实用性不高，实现也挺麻烦，也不够灵活，所以我就不详细写了，有兴趣可以参考<a href="http://www.cnblogs.com/rainman/archive/2011/02/21/1960044.html" target="_blank" rel="external">这篇文章</a></p>
<h3 id="客户端和服务端配合实现jsonp"><a href="#客户端和服务端配合实现jsonp" class="headerlink" title="客户端和服务端配合实现jsonp"></a>客户端和服务端配合实现jsonp</h3><p>jsonp其实就是动态创建js脚本。虽然浏览器默认禁止了跨域访问，但并不禁止在页面中引用其他域的JS文件，并可以自由执行引入的JS文件中的函数，因此可以将script的src属性设为需要跨域的接口地址，但是需要服务器将数据组装成js变量定义或者函数传回来，举例如下：<br>比如kangbiao.org/index 需要调用t1.kangbiao.org/getServerInfo接口获取服务器信息，原来该接口的返回是:<br><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"ip"</span>:<span class="string">"192.168.1.1"</span>,</div><div class="line">  <span class="attr">"cpu"</span>:<span class="string">"Intel i5"</span>,</div><div class="line">  <span class="attr">"network"</span>:<span class="string">"100M"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>现在为了配合jsonp的话返回格式应该如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">  <span class="keyword">var</span> response=&#123;</div><div class="line">  <span class="string">"ip"</span>:<span class="string">"192.168.1.1"</span>,</div><div class="line">  <span class="string">"cpu"</span>:<span class="string">"Intel i5"</span>,</div><div class="line">  <span class="string">"network"</span>:<span class="string">"100M"</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>所以jsonp就是在返回数据中定义一个js变量或者函数来实现动态创建js脚本，这样做的缺点也显而易见，会出现变量污染或者函数重名(可以通过生命一个服务器专用的函数对象解决)，而且服务器和前端脚本变量绑定太强，不是很灵活。</p>
<h3 id="采用HTML5中的postMessage解决"><a href="#采用HTML5中的postMessage解决" class="headerlink" title="采用HTML5中的postMessage解决"></a>采用HTML5中的<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/postMessage" target="_blank" rel="external">postMessage</a>解决</h3><p>postMessage可以实现窗口和窗口，页面和iframe，页面和窗口间的跨域通信。<br>postMessage需要源网站和跨域网站同时实现两个接口postMessage(发送数据)和addEventListener(监听事件，接受数据)</p>
<blockquote>
<p>otherWindow.postMessage(message, targetOrigin);</p>
</blockquote>
<p><em>otherWindow</em><br>其他窗口的一个引用，比如iframe的contentWindow属性、执行<a href="https://developer.mozilla.org/en-US/docs/DOM/window.open" target="_blank" rel="external">window.open</a>返回的窗口对象、或者是命名过或数值索引的<a href="https://developer.mozilla.org/en-US/docs/DOM/window.frames" target="_blank" rel="external">window.frames</a>。</p>
<p><em>message</em><br>将要发送到其他 window的数据。</p>
<p><em>targetOrigin</em><br>通过窗口的origin属性来指定哪些窗口能接收到消息事件，其值可以是字符串”*“（表示无限制）或者一个URI。在发送消息的时候，如果目标窗口的协议、主机地址或端口这三者的任意一项不匹配targetOrigin提供的值，那么消息就不会被发送；只有三者完全匹配，消息才会被发送。这个机制用来控制消息可以发送到哪些窗口；例如，当用postMessage传送密码时，这个参数就显得尤为重要，必须保证它的值与这条包含密码的信息的预期接受者的orign属性完全一致，来防止密码被恶意的第三方截获。如果你明确的知道消息应该发送到哪个窗口，那么请始终提供一个有确切值的targetOrigin，而不是*。不提供确切的目标将导致数据泄露到任何对数据感兴趣的恶意站点。</p>
<blockquote>
<p>target.addEventListener(type, listener[, useCapture]);</p>
</blockquote>
<p><em>type</em><br>表示所监听<a href="https://developer.mozilla.org/zh-CN/docs/DOM/event.type" target="_blank" rel="external">事件类型</a>的一个字符串。</p>
<p><em>listener</em><br>当指定的事件类型发生时被通知到的一个对象。该参数必是实现<br><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/EventListener" target="_blank" rel="external">EventListener
</a> 接口的一个对象或函数。</p>
<p><em>useCapture</em><br>  可选<br>如果值为true， useCapture表示用户希望发起捕获。 在发起捕获之后， 只要Dom子树下发生了该事件类型，都会先被派发到该注册监听器，然后再被派发到Dom子树中的注册监听器中。并且向上冒泡的事件不会触发那些发起捕获的事件监听器。进一步的解释可以查看 <a href="http://www.w3.org/TR/DOM-Level-3-Events/#event-flow" target="_blank" rel="external">DOM Level 3 Events</a> 文档。 请注意该参数并不是在所有的浏览器版本中都是可选的。如果没有指定， useCapture默认为false 。</p>
<p>两个函数的定义如上，addEventListener不是html5中特有的，postMessage是html新增实现跨域通信的。<br>如果需要跨域交换数据，则需要两边都需要同时实现这两个接口，才能交换数据，不然只能单方向的接收或者发送数据。一般的实现是在addEventListener的回掉函数中通过event.data获取到传过来的数据后，再次调用postMessage将处理后的数据返回给消息来源对象。这样实现好处就是完全不需要后端的参与。但是有一定的安全风险，配合xss可以导致用户凭证信息被盗取。<br>具体的代码示例参考<a href="http://www.runoob.com/jsref/met-element-addeventlistener.html" target="_blank" rel="external">postMessage实示例</a></p>
<h3 id="服务器响应头控制-CORS-跨域资源共享"><a href="#服务器响应头控制-CORS-跨域资源共享" class="headerlink" title="服务器响应头控制(CORS 跨域资源共享)"></a>服务器响应头控制(CORS 跨域资源共享)</h3><p>这种方法是我认为最好的方法，由服务器决定是否允许跨域，如果允许，服务器在响应头中添加相应的字段告诉浏览器此次跨域合法，则浏览器不会将请求包丢弃(文章开头说了跨域其实是浏览器的一种行为)，从而完成跨域。<br>这种方法的详细操作我就不多说了，参考廖雪峰的<a href="http://www.ruanyifeng.com/blog/2016/04/cors.html" target="_blank" rel="external">这篇文章</a><br>主要叙述下服务端怎么设置响应头<br>在PHP中可以中国header()函数设置允许跨域字段<br>在java中可以通过设置reponse.setHeader()函数来设置，spring4.2及以上版本提供了@CrossOrigin注解来方便实现跨域。</p>
<h3 id="服务器代理"><a href="#服务器代理" class="headerlink" title="服务器代理"></a>服务器代理</h3><p>服务器代理就是将需要跨域访问的地址通过服务器访问(服务器此时作为客户端，不会受同源策略限制)，然后由服务器返回结果。<br>例如kangbiao.org/index 页面需要访问api.weibo.com/getNews 来获取最新新闻，我们可以通过在kangbiao.org的服务器上面多增加一个接口 kangbiao.org/api?url=api.weibo.com/getNews ，然后再服务器内部，该接口所做的事情就是向api.weibo.com/getNews 发起请求即可，然后将结果返回。<br>这样做的好处是实现十分简单，而且可以访问任何跨域站点，缺点就是需要新增维护一个接口，而且如果服务器是通过代理网关，只能内网通信的话也很麻烦。</p>
<h3 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h3><p>反向代理也是在服务器实现的，主要是通过正则匹配url，匹配成功后重写到目标地址即可，这种方法可以实现所有网站的跨域，不需要服务器提供跨域支持，个人认为比较方便，甚至可以配置kangbiao.org/proxy/weibo/实现将api.weibo.com域的接口整合到我们自己的网站下面来，并且程序不需要做任何改动，改下nginx的配置文件即可。具体的实现方案很多，google或者百度nginx反向代理实现跨域即可。</p>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ul>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Access_control_CORS" target="_blank" rel="external">firefox开发者文档-CORS</a></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/postMessage" target="_blank" rel="external">firefox开发者文档-postMessage</a></li>
<li><a href="https://zh.wikipedia.org/wiki/BOM" target="_blank" rel="external">维基百科-BOM</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;HTTP访问控制-CORS&quot;&gt;&lt;a href=&quot;#HTTP访问控制-CORS&quot; class=&quot;headerlink&quot; title=&quot;HTTP访问控制(CORS)&quot;&gt;&lt;/a&gt;HTTP访问控制(CORS)&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;同源策略&lt;/strong&gt;&lt;br
    
    </summary>
    
      <category term="web前端" scheme="http://kangbiao.org/categories/web%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="跨域" scheme="http://kangbiao.org/tags/%E8%B7%A8%E5%9F%9F/"/>
    
  </entry>
  
  <entry>
    <title>WebSocket加RabbitMQ实现web应用实时获取服务器推送</title>
    <link href="http://kangbiao.org/2016/07/10/websocket-with-rabbitmq/"/>
    <id>http://kangbiao.org/2016/07/10/websocket-with-rabbitmq/</id>
    <published>2016-07-10T14:47:44.000Z</published>
    <updated>2016-07-30T09:30:08.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>这篇文章主要记录一下通过实现一个实时获取推送的web应用从而加深对WebSocket的理解，至于为什么用RabbitMQ，只是因为我想顺便熟悉一下这个消息中间件。</p>
</blockquote>
<h1 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h1><h2 id="传统Web应用实现长连接的方式"><a href="#传统Web应用实现长连接的方式" class="headerlink" title="传统Web应用实现长连接的方式"></a>传统Web应用实现长连接的方式</h2><p><strong>Comet</strong><br><a href="https://zh.wikipedia.org/wiki/Comet_\\(web%E6%8A%80%E6%9C%AF\\" target="_blank" rel="external">Comet_维基百科</a>#.E9.95.BF.E8.BD.AE.E8.AF.A2)</p>
<p><strong>Ajax 短轮询</strong><br>Ajax 轮询主要通过页面端的 JS 定时异步刷新任务来实现数据的加载</p>
<h2 id="WebSocket"><a href="#WebSocket" class="headerlink" title="WebSocket"></a>WebSocket</h2><p>WebSocket 是 HTML5 中一种新的通信协议，能够实现浏览器与服务器之间全双工通信。</p>
<h2 id="RabbitMQ"><a href="#RabbitMQ" class="headerlink" title="RabbitMQ"></a>RabbitMQ</h2><h1 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h1><blockquote>
<p>环境准备参考官网即可，一般情况下不会出现问题，出现问题主要是依赖问题，根据提示安装好依赖就行。本文重点在于实现一个实时获取推送的web应用，工具的使用请参考官方文档。</p>
</blockquote>
<h2 id="erlang安装"><a href="#erlang安装" class="headerlink" title="erlang安装"></a>erlang安装</h2><blockquote>
<p>百度<code>erlang</code>按照官网的教程走就行了。</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">error: Failed dependencies:</div><div class="line">	libGLU.so.1()(64bit) is needed by esl-erlang-19.0-1.x86_64</div><div class="line">	libwx_baseu-2.8.so.0()(64bit) is needed by esl-erlang-19.0-1.x86_64</div><div class="line">	libwx_baseu-2.8.so.0(WXU_2.8)(64bit) is needed by esl-erlang-19.0-1.x86_64</div><div class="line">	libwx_baseu_xml-2.8.so.0()(64bit) is needed by esl-erlang-19.0-1.x86_64</div><div class="line">	libwx_gtk2u_adv-2.8.so.0()(64bit) is needed by esl-erlang-19.0-1.x86_64</div><div class="line">	libwx_gtk2u_adv-2.8.so.0(WXU_2.8)(64bit) is needed by esl-erlang-19.0-1.x86_64</div><div class="line">	libwx_gtk2u_aui-2.8.so.0()(64bit) is needed by esl-erlang-19.0-1.x86_64</div><div class="line">	libwx_gtk2u_aui-2.8.so.0(WXU_2.8)(64bit) is needed by esl-erlang-19.0-1.x86_64</div><div class="line">	libwx_gtk2u_aui-2.8.so.0(WXU_2.8.5)(64bit) is needed by esl-erlang-19.0-1.x86_64</div><div class="line">	libwx_gtk2u_core-2.8.so.0()(64bit) is needed by esl-erlang-19.0-1.x86_64</div><div class="line">	libwx_gtk2u_core-2.8.so.0(WXU_2.8)(64bit) is needed by esl-erlang-19.0-1.x86_64</div><div class="line">	libwx_gtk2u_gl-2.8.so.0()(64bit) is needed by esl-erlang-19.0-1.x86_64</div><div class="line">	libwx_gtk2u_gl-2.8.so.0(WXU_2.8)(64bit) is needed by esl-erlang-19.0-1.x86_64</div><div class="line">	libwx_gtk2u_html-2.8.so.0()(64bit) is needed by esl-erlang-19.0-1.x86_64</div><div class="line">	libwx_gtk2u_html-2.8.so.0(WXU_2.8)(64bit) is needed by esl-erlang-19.0-1.x86_64</div><div class="line">	libwx_gtk2u_stc-2.8.so.0()(64bit) is needed by esl-erlang-19.0-1.x86_64</div><div class="line">	libwx_gtk2u_stc-2.8.so.0(WXU_2.8)(64bit) is needed by esl-erlang-19.0-1.x86_64</div><div class="line">	libwx_gtk2u_xrc-2.8.so.0()(64bit) is needed by esl-erlang-19.0-1.x86_64</div><div class="line">	libwx_gtk2u_xrc-2.8.so.0(WXU_2.8)(64bit) is needed by esl-erlang-19.0-1.x86_64</div><div class="line"></div><div class="line">如果出现上述错误，说明是缺少依赖，执行以下两行命令即可</div><div class="line"><span class="comment"># yum -y install make gcc gcc-c++ kernel-devel m4 ncurses-devel openssl-devel java-devel  unixODBC-devel;</span></div><div class="line"><span class="comment"># yum install unixODBC unixODBC-devel wxBase wxGTK SDL wxGTK-gl</span></div><div class="line"></div><div class="line">最后执行`erl`，如果进入了erlang的交互式shell，则说明安装成功。</div><div class="line"><span class="comment"># erl</span></div></pre></td></tr></table></figure>
<h2 id="rabbitmq安装"><a href="#rabbitmq安装" class="headerlink" title="rabbitmq安装"></a>rabbitmq安装</h2><blockquote>
<p>还是按照官网教程走就行了，这里有个坑就是如果erlang是通过rpm包安装的话会出现rabbitmq依赖的erlang版本错误的问题，估计是由于一些环境变量不对，这里我也没有多折腾，较快的解决方案是使用yum安装一次就好了。</p>
</blockquote>
<p>安装好rabbitmq后，执行以下命令启用web管理扩展，这样就可以通过web端来查看rabbitmq的运行状态</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># rabbitmq-plugins enable rabbitmq_management rabbitmq_web_stomp rabbitmq_stomp</span></div><div class="line"></div><div class="line">但是由于rabbitmq_management的默认设置，此时只能通过localhost访问rabbitmq的web管理端。</div><div class="line">新建/etc/rabbitmq/rabbitmq.config文件，加入如下配置即可解决</div><div class="line"></div><div class="line">[&#123;rabbit, [&#123;loopback_users, []&#125;]&#125;].</div><div class="line"></div><div class="line">最后重启rabbitmq使更改生效。</div><div class="line"><span class="comment"># service rabbitmq-server restart</span></div><div class="line">然后就可以通过http://ip:15672来访问到rabbitmq的web管理端。</div></pre></td></tr></table></figure>
<h2 id="java环境配置"><a href="#java环境配置" class="headerlink" title="java环境配置"></a>java环境配置</h2><p>略</p>
<h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><p>待更新</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;这篇文章主要记录一下通过实现一个实时获取推送的web应用从而加深对WebSocket的理解，至于为什么用RabbitMQ，只是因为我想顺便熟悉一下这个消息中间件。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;基本概念&quot;&gt;&lt;a href=&quot;#
    
    </summary>
    
      <category term="CS原理" scheme="http://kangbiao.org/categories/CS%E5%8E%9F%E7%90%86/"/>
    
    
      <category term="WebSocket" scheme="http://kangbiao.org/tags/WebSocket/"/>
    
  </entry>
  
  <entry>
    <title>为PHPStorm开发一个在内网通过SSH代理隧道实现一键代码同步功能的插件</title>
    <link href="http://kangbiao.org/2016/06/20/phpstorm-filesync-plugin/"/>
    <id>http://kangbiao.org/2016/06/20/phpstorm-filesync-plugin/</id>
    <published>2016-06-20T14:47:44.000Z</published>
    <updated>2016-07-30T09:32:36.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p><strong>写在前面：</strong>开发这个插件的背景是我所在的公司的测试环境的机器是不能够直接在本地通过SSH登陆上去的，需要先SSH登陆到一个跳板机上面，然后再跳板机上面SSH登陆到测试环境的机器上面。另外一个比较坑的地方就是测试环境的机器和代码仓库的网络是不通的，所以测试环境的代码部署是通过sz命令一个一个本地上传（对，压缩包都不能传），另外本地电脑的网络和测试环境完全隔离，测试是通过在测试机器上面发包实现。</p>
<p>讲道理，这是一种很笨拙的做法，但是由于公司网络限制，又没有办法。然而自从前段时间不小心看见了一片关于Xshell代理隧道实现内网访问的文章，下来仔细想了想，竟然可以通过这个方法来实现本地直接访问测试环境，发测试请求包等等。后来又想到可不可以写一个PHPStorm插件实现在编辑器右键然后可以在弹出菜单里面选择一个同步到测试环境或者从测试环境同步实现一键代码同步。</p>
</blockquote>
<p><strong>所以这篇文章主要会记录一下几个知识点：</strong></p>
<ol>
<li>三种SSH代理的区别和原理。</li>
<li>jsch实现跳板机多次ssh登陆的原理。</li>
<li>基于jetbrains(phpstorm，idea，pycharm等)的IDE的插件开发介绍。</li>
<li>怎样实现用户可配置插件和怎样在插件中通过jsch实现SSH代理。</li>
<li>一些其他的坑。</li>
</ol>
<p>加班太多，还没写好，待更新。。。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;写在前面：&lt;/strong&gt;开发这个插件的背景是我所在的公司的测试环境的机器是不能够直接在本地通过SSH登陆上去的，需要先SSH登陆到一个跳板机上面，然后再跳板机上面SSH登陆到测试环境的机器上面。另外一个比较坑的地方就是测试环境的
    
    </summary>
    
      <category term="JAVA" scheme="http://kangbiao.org/categories/JAVA/"/>
    
    
      <category term="idea插件" scheme="http://kangbiao.org/tags/idea%E6%8F%92%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>redis高性能SDS字符串实现分析</title>
    <link href="http://kangbiao.org/2016/04/30/redis-sds/"/>
    <id>http://kangbiao.org/2016/04/30/redis-sds/</id>
    <published>2016-04-30T14:21:31.000Z</published>
    <updated>2016-05-01T07:16:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="字符串在C语言中的存储方式"><a href="#字符串在C语言中的存储方式" class="headerlink" title="字符串在C语言中的存储方式"></a>字符串在C语言中的存储方式</h2><blockquote>
<p>在C语言中，采用长度为N+1的字符数组来存储一个长度为N的字符串，最后一个字符是空字符\0，表示字符串的结尾。</p>
</blockquote>
<p>在C语言中，增加或者减少字符串的长度都涉及内存空间的重新分配，这是很耗时的，对于一个作为数据库的应用redis来说，直接使用这种方式会严重影响性能。C语言对字符串的操作过程如下：</p>
<ol>
<li>如果增加字符串的长度的话，在操作之前需要通过重新分配内存来扩展存储该字符串底层数组的长度，否则会发生缓冲区溢出。</li>
<li>如果减少字符串长度的话，在操作之前同样需要重新分配内存释放多余的内存空间，不重新分配内存虽然不会直接造成程序崩溃，但是当这种操作多了以后，就会有大量的空闲的内存空间而导致内存泄漏问题。</li>
</ol>
<h2 id="Redis字符串存储方案"><a href="#Redis字符串存储方案" class="headerlink" title="Redis字符串存储方案"></a>Redis字符串存储方案</h2><h3 id="SDS存储的结构体"><a href="#SDS存储的结构体" class="headerlink" title="SDS存储的结构体"></a>SDS存储的结构体</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">struct</span> sdshdr&#123;</div><div class="line">        <span class="keyword">int</span> len;            <span class="comment">//buf数组中已经使用的字节的数量，也就是SDS字符串长度</span></div><div class="line">        <span class="keyword">int</span>  <span class="built_in">free</span>;          <span class="comment">//buf数组中未使用的字节的数量</span></div><div class="line">        <span class="keyword">char</span> buf[];      <span class="comment">//字节数组，字符串就保存在这里面</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>redis通过定义结构体的方式，扩展了C语言底层字符串的缺点，字符串长度的获取时间复杂度从原来的O（N）变成了O（1），另一方面也可以通过free的动态改变减少内存的分配。<strong>需要强调一点的是buf数组不是存储的字符，而是二进制数组，因为C语言字符串中间是不能出现空字符的，而二进制数据中间很有可能会有空字符，所以C语言是二进制不安全的，而redis又是二进制安全，为了存储多种类型的数据，redis就直接把所有数据当作二进制来存储，这样就可以存储媒体文件和字符串，所以SDS虽然叫简单动态字符串，但是它可不只是用来保存字符串哦</strong></p>
<h3 id="buf数组动态分配策略"><a href="#buf数组动态分配策略" class="headerlink" title="buf数组动态分配策略"></a>buf数组动态分配策略</h3><blockquote>
<p>既然redis定义了一个结构体来描述一个SDS字符串，多出来的几个变量肯定是有很大作用的，其中一个很重要的作用就是实现对字符串的灵活操作并且尽量减少内存重新分配和回收操作。</p>
</blockquote>
<p><strong>redis的内存分配策略如下：</strong></p>
<ol>
<li>当SDS的len属性长度小于1MB时，redis会分配和len相同长度的free空间。至于为什么这样分配呢，我觉得这个有点像一种惯性预测。举个例子，比如一个乞丐向你要10块钱，如果让你预测下一个乞丐会让你要多少，这个时候我没有其他的依据，当然就只能根据上一个乞丐的行为来推测下一个乞丐会让我要10块啦~放到redis里面，上次用了len长度的空间，那么下次程序可能也会用len长度的空间，所以redis就为你预分配这么多的空间。</li>
<li>但是当SDS的len属性长度大于1MB时，这个时候我在根据这种惯性预测来分配的话就有点得不偿失了，比如修改后的SDS长度为100MB，那我也傻乎乎的给你分配100MB空闲内存等你用么？万一你下次用不了这么多了，对于内存而言就亏大发了。所以，redis是将1MB设为一个风险值，没过风险值你用多少我就给你多少，过了的话那这个风险值就是我能给你临界值，感觉父母给零花钱也是酱紫。。至于为什么是1MB，这个问题就和redis使用的场景有关了。</li>
</ol>
<p><strong>reids的内存回收策略如下：</strong></p>
<ol>
<li>redis的内存回收采用惰性回收，即你把字符串变短了，那么多余的内存空间我先不还给操作系统，先留着，万一马上又要被使用呢。短暂的持有资源，既可以充分利用资源，也可以不浪费资源。这是一种很优秀的思想。</li>
</ol>
<p>综上所述，redis实现的高性能字符串的结果就把N次字符串操作必会发生N次内存重新分配变为人品最差时最多发生N次重新分配。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;字符串在C语言中的存储方式&quot;&gt;&lt;a href=&quot;#字符串在C语言中的存储方式&quot; class=&quot;headerlink&quot; title=&quot;字符串在C语言中的存储方式&quot;&gt;&lt;/a&gt;字符串在C语言中的存储方式&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;在C语言中，采用长度为N+
    
    </summary>
    
      <category term="SQL&amp;NoSQL" scheme="http://kangbiao.org/categories/SQL-NoSQL/"/>
    
    
      <category term="redis" scheme="http://kangbiao.org/tags/redis/"/>
    
      <category term="读书笔记" scheme="http://kangbiao.org/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>跨级DNS查询问题分析</title>
    <link href="http://kangbiao.org/2016/04/17/dns-lookup/"/>
    <id>http://kangbiao.org/2016/04/17/dns-lookup/</id>
    <published>2016-04-17T14:47:44.000Z</published>
    <updated>2016-04-18T15:48:06.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><blockquote>
<p>由于有个小项目需要搭个临时的多语言测试环境，所以做了个多级域名来区分不同的语言环境。</p>
</blockquote>
<p><strong>操作如下:</strong></p>
<ol>
<li>在阿里云的控制面板，将t1.kangbiao.org和t2.kangbiao.org两个二级域名分别解析到两台服务器上面。</li>
<li>在t1.kangbiao.org服务器上面安装nginx，修改配置文件，分别添加java.nginx.conf，python.nginx.conf和php.nginx.conf三个配置文件。</li>
<li>设置三个语言环境的访问方式(即修改三个配置文件服务器名)为java.t1.kangbiao.org，py.t1.kangbiao.org和php.t1.kangbiao.org。(完全是强迫症犯了，不想分目录访问三个语言环境的服务)。<br><strong>问题：</strong><br>只有t1.kangbiao.org能正确访问，其他的三级域名均查询不到dns。<br>这就是没有完全理解dns查询过程导致的坑啊。我一直以为把域名解析到服务器后，这个域名对应的下级域名就可以在服务器上面配置，然后就可以实现泛解析或者多下级域名访问。</li>
</ol>
<h2 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h2><h3 id="nginx配置有问题？"><a href="#nginx配置有问题？" class="headerlink" title="nginx配置有问题？"></a>nginx配置有问题？</h3><p>对照着nginx的官方文档一个配置一个配置的检查了每个配置文件是否正确，甚至把无关紧要的配置项都改来改去测试是不是配置问件有问题，然而改了一个小时候，完全放弃，这根本不是配置文件的坑好嘛。</p>
<h3 id="网络问题？"><a href="#网络问题？" class="headerlink" title="网络问题？"></a>网络问题？</h3><p>于是又想是不是公司网络的问题，需要用自己的手机访问了一下，still error。。。于是这个问题原因就被排除了。</p>
<h3 id="DNS解析问题？"><a href="#DNS解析问题？" class="headerlink" title="DNS解析问题？"></a>DNS解析问题？</h3><p>后来仔细看了看浏览器报的错，感觉这是dns没有配对啊。于是上网查了查dns解析原理。最后基本确定是三级域名没有解析记录导致的。</p>
<h3 id="开始解决"><a href="#开始解决" class="headerlink" title="开始解决"></a>开始解决</h3><p>在阿里云控制面板增加三个域名解析A记录py.t1，java.t1和php.t1后访问，访问正常。我只是测试性的这样配置一下，没想到阿里云还真支持这种a记录里面带.的解析配置。最后想了想，在用户这样设置的时候，这条解析记录直接就绕过t1.kangbiao.org这个域而生效了。<br>一般我们设置php.t1.kangbiao.org解析后的DNS查询如下：</p>
<ol>
<li>浏览器查询本地缓存，没有则会像ISP的dns发起查询，如果ISP的DNS也没有缓存，则一级一级的去查询解析记录。</li>
<li>由于每一次的查询，浏览器都是带着完整的域名php.t1.kangbiao.org去查询，所以即使没有设置t1.kangbiao.org的解析记录，仍然可以直接查到php.t1.kangbiao.org对应的主机。</li>
<li>所以，dns查询过程并不是一定要老老实实的对每一级域进行查询，只要有记录，是可以跳级去查询的。并不是每个域都要有解析记录。比如一台DNS服务器上面有kangbiao.org和php.t1.kangbiao.org两条解析记录，而t1.kangbiao.org没有解析记录时，那么当去查询php.t1.kangbiao.org时，这台DNS服务器并不是告诉你t1.kangbiao.org对应的服务器是哪一台，而是直接就返回php.t1.kangbiao.org的地址。<strong>所以域名在DNS解析里面是字符串式的查询，是不分域的，也就是可以不是一层一层的查询，而是这个域名对应的字符串有解析记录我就返回给你，当查不到时，会返回该DNS服务器已经记录的离该查询域名最近的一个域对应的服务器地址（可能就是该域名本身），分域是针对于浏览器的一个概念</strong></li>
</ol>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>所以这下就知道了为什么刚开始只设置t1.kangbiao.org的解析记录，然后再服务器上面设置php.t1.kangbiao.org会访问不到的原因了，因为最后当DNS查询进行到最后一级(即php.t1.kangbiao.org)的时候，是向装有nginx的那台web服务器进行了一次DNS解析查询，明显的那台服务器没有装DNS服务器，所以53号端口就完全没有被开放，所以会直接导致DNS查询失败，在DNS查询里面，分域就是一种协议，大家互相遵守。</p>
<p>教科书上说的果然都是一般情况，技巧性的东西还需多跳坑。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;由于有个小项目需要搭个临时的多语言测试环境，所以做了个多级域名来区分不同的语言环境。&lt;/p&gt;
&lt;/blockquo
    
    </summary>
    
      <category term="CS原理" scheme="http://kangbiao.org/categories/CS%E5%8E%9F%E7%90%86/"/>
    
    
  </entry>
  
  <entry>
    <title>通过Servlet和CGI协议深入理解web数据传输</title>
    <link href="http://kangbiao.org/2016/03/20/web-cgi/"/>
    <id>http://kangbiao.org/2016/03/20/web-cgi/</id>
    <published>2016-03-20T14:47:44.000Z</published>
    <updated>2016-04-02T16:04:38.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>写在前面：由于我自身水平有限，可能文章中有些地方的用词以及概念理解不是很标准，欢迎大家留言指正。这篇文章主要是总结一下我通过学习CGI，然后结合自己的理解对web请求中数据传输的认识。写出来给大家一个参考。</p>
<p>为什么会去研究这个？主要是因为在看公司自己开发的一个php框架的时候，发现自己对web底层数据传输存在疑惑，觉得有必要深入了解一下一个请求怎样通过web服务器(例如nginx，apache)变成编程语言可以处理的数据。</p>
</blockquote>
<h1 id="一、基本概念"><a href="#一、基本概念" class="headerlink" title="一、基本概念"></a>一、基本概念</h1><ol>
<li>CGI：即通用网关接口，是一种协议，定义了web服务器和应用程序交互数据的基本格式。例如一个请求发送到nginx后，nginx应该按照CGI协议将请求按照规定的格式处理好后（标准的请求头信息，查询字符串，请求路径等等），然后启用相应的应用程序解析器（php就是php解释器，python就是python解释器），然后把数据传输给解析器，这个时候解析器就可以定位到我们编写的处理代码对请求进行处理，处理完以后按照CGI协议规定的数据格式将结果返回给web服务器，最后退出进程。</li>
<li>fastcgi：fastcgi可以看作是cgi协议的改良版，cgi是通过启用一个解释器进程来处理每个请求，耗时且耗资源，而fastcgi则是通过master-woker形式来处理每个请求，即启动一个master主进程，然后根据配置启动几个worker进程，当请求进来时，master从worker进程中选择一个去处理请求，这样就避免了重复的开启和结束进程带来频繁cpu上下文切换而导致耗时。所以fastcgi也是一种规定了如何实现web服务器和应用程序通信的协议，但是比cgi协议更先进。</li>
</ol>
<blockquote>
<p>几乎所有的语言都可以通过实现CGI或者fastcgi协议编写一个web应用。java的servlet实现是自己规定了一套协议，与这两种方式不同。</p>
</blockquote>
<h1 id="二、php结合nginx举例"><a href="#二、php结合nginx举例" class="headerlink" title="二、php结合nginx举例"></a>二、php结合nginx举例</h1><h2 id="通过cgi实现"><a href="#通过cgi实现" class="headerlink" title="通过cgi实现"></a>通过cgi实现</h2><ol>
<li>用户请求<a href="http://www.baidu.com?key=码农&amp;platform=linux。" target="_blank" rel="external">http://www.baidu.com?key=码农&amp;platform=linux。</a></li>
<li>省略一系列DNS解析然后将数据传输到nginx监听的端口上。</li>
<li>nginx根据配置文件判断该请求是否是静态文件，是的话直接从文件系统读取返回给浏览器。不是的话将接收到的数据进行处理（按照CGI或者fastcgi协议规定的格式），提取出请求头，请求参数，资源路径等信息。</li>
<li>nginx通过配置文件启动一个cgi程序，例如php_cgi，由于php_cgi程序是实现了cgi协议的，所以它能够识别出nginx传过来的数据，然后去执行相应的php文件。</li>
<li>php_cgi将执行后的结果返回给nginx，然后进程退出。</li>
<li>nginx将获得的结果按照http协议规范处理后返回给浏览器。</li>
</ol>
<h2 id="通过fastcgi实现"><a href="#通过fastcgi实现" class="headerlink" title="通过fastcgi实现"></a>通过fastcgi实现</h2><ol>
<li>Web Server启动时载入FastCGI进程管理器（IIS ISAPI，Apache Module或者php-fpm)</li>
<li>FastCGI进程管理器自身初始化，启动多个CGI解释器进程(多个php-cgi)并等待WebServer的连接。</li>
<li>当客户端请求到达Web Server时，FastCGI进程管理器选择并连接到一个CGI解释器。 Web server将CGI环境变量和标准输入发送到FastCGI子进程php-cgi。</li>
<li>FastCGI子进程完成处理后将标准输出和错误信息从同一连接返回Web Server。当FastCGI子进程关闭连接时，请求便告处理完成。FastCGI子进程接着等待并处理来自FastCGI进程管理器(运行在Web Server中)的下一个连接。</li>
</ol>
<h1 id="三、java实现"><a href="#三、java实现" class="headerlink" title="三、java实现"></a>三、java实现</h1><p>java的实现不是CGI协议，java servlet是基于多线程来处理每一个请求，即每个请求是在一个线程中去处理，由web容器去维护这个线程池和该每个servlet实例的生存周期。</p>
<p>在java中，是规定了自己的网关数据交互协议（与CGI类似），所以java有自己的web服务器（例如tomcat，jetty等），而不能直接用nginx直接作为web服务器与web容器进行数据交互。java的web服务器可以直接处理来自浏览器的请求，也可以处理来自nginx代理转发的数据，然后将数据重新处理成java web容器能够处理的数据格式。</p>
<p>需要补充一点的是，现在绝大部分java web服务器都实现了web容器的功能，所以很难从实际上去感受这两者之间的区别，但是这种层次关系是存在的。</p>
<h1 id="四、多进程和多线程处理请求的区别"><a href="#四、多进程和多线程处理请求的区别" class="headerlink" title="四、多进程和多线程处理请求的区别"></a>四、多进程和多线程处理请求的区别</h1><ol>
<li>进程内传递数据只是一个引用，同一份数据无需反复多次解析。而FastCGI之类通过IPC、环境变量传递数据，毫无疑问会面临数据序列化、拷贝、反序列化的overhead，而且这还是单程通讯的开销。</li>
<li>Servlet方案的瓶颈在于线程的动态管理、调度成本高过Async I/O，但那往往是访问请求到10K/S以后的事。而且到了那个层面，优先考虑的不是单机的Scale up问题，而是整个机群的Scale out问题</li>
<li>关于动静态页面分离，这是一个架构的复杂度和效率的取舍。首先不要想当然认为不分离性能就不好。设计良好的servlet application自然有caching机制，用java写的hashmap在很多情况下benchmark还比native的版本高。</li>
</ol>
<h1 id="五、感悟"><a href="#五、感悟" class="headerlink" title="五、感悟"></a>五、感悟</h1><p>在软件工程里面，重要的是好的设计和规范，难点也往往在这里，而对于实现却可以有很多种方式，只需要根据业务场景取舍就行。比如用php或者java实现一个分布式的多模块系统，对于java而言，开源的实现很多，所以在相同的条件下，选择java会更好，但是可能由于公司的技术体系需要选择php，这个时候可能就需要自己去实现一套适用于php的分布式服务框架。以后的工作和学习中应该着重加强自己在这方面的能力。</p>
<h1 id="六、参考资料"><a href="#六、参考资料" class="headerlink" title="六、参考资料"></a>六、参考资料</h1><ol>
<li><a href="https://www.zhihu.com/question/20624033" target="_blank" rel="external">Java Servlet为什么不做成FastCGI模式？</a></li>
<li><a href="http://stackoverflow.com/questions/12666962/difference-between-fastcgi-and-java-servlet-api" target="_blank" rel="external">Difference between FastCGI and Java Servlet API</a></li>
<li><a href="http://blog.csdn.net/zdwzzu2006/article/details/5945635" target="_blank" rel="external">Servlet的生命周期，Servlet和CGI的区别</a></li>
<li><a href="https://segmentfault.com/q/1010000000256516" target="_blank" rel="external">搞不清FastCgi与PHP-fpm之间是个什么样的关系</a></li>
<li><a href="https://zh.wikipedia.org/wiki/Special:Search?search=fastcgi&amp;go=Go" target="_blank" rel="external">维基百科fastcgi</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;写在前面：由于我自身水平有限，可能文章中有些地方的用词以及概念理解不是很标准，欢迎大家留言指正。这篇文章主要是总结一下我通过学习CGI，然后结合自己的理解对web请求中数据传输的认识。写出来给大家一个参考。&lt;/p&gt;
&lt;p&gt;为什么会去研究这个？主要是
    
    </summary>
    
      <category term="CS原理" scheme="http://kangbiao.org/categories/CS%E5%8E%9F%E7%90%86/"/>
    
    
      <category term="cgi" scheme="http://kangbiao.org/tags/cgi/"/>
    
  </entry>
  
  <entry>
    <title>跳了一次JAVA泛型擦除的坑</title>
    <link href="http://kangbiao.org/2016/02/24/java-generic/"/>
    <id>http://kangbiao.org/2016/02/24/java-generic/</id>
    <published>2016-02-24T14:24:56.000Z</published>
    <updated>2016-04-02T15:54:12.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>记录一下今天在帮同事解决使用spring参数注入问题的时候由于对泛型的理解不到位而遇到的坑。</p>
</blockquote>
<p>如下代码所示：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"saveAll"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> ResponseMsg <span class="title">saveAll</span><span class="params">(List&lt;Rule&gt; rules)</span></span>&#123;</div><div class="line">	Rule rule=rules.get(<span class="number">0</span>);    <span class="comment">//这行代码在测试的时候报错了</span></div><div class="line">......</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这段代码的意思是使用spring的参数注入功能自动完成将前端传过来的数据装载到rules变量里面。<br>我刚开始一直认为这段代码肯定是对的，然后就一直说同事一定是前端传过来的数据有错，然后就各种检查js，debug一步一步的查，发现前端传过来的数据是正确的，后来我又想会不会是eclipse的debug功能有缺陷（原谅一个idea粉对eclipse的各种不屑），当然继续被打脸，因为我在我电脑上debug时数据是一样的，rules里面的元素居然是LinkedHashMap！！看着debug显示的数据，简直不能接受，我明明声明了rules对象只能存Rules对象啊，怎么会装其他对象！！</p>
<p>然后就真的没辙了。。我就说这个问题我解决不了了，超出我认知范围啊，然后我们叫了一个正式员工过来帮我们看看。。他开始也是按我们的步骤排错，后来遇到和我们一样的问题，但是牛人终究是牛人，能想出来的导致问题的因素也比我们多，他说会不会是spring不支持这种带泛型的自动参数装载啊，毕竟泛型是要被擦除的。。</p>
<p>擦除。。。泛型擦除。。。我靠，我终于知道是什么原因了。之前看了那么多关于泛型擦除的居然都没有想到是这个问题！！而且这种坑当时也踩过，居然没联想起来，智商捉急。</p>
<p>关于泛型擦除的详细介绍具体是什么我就不写在这篇文章里面了，大概就是在编译前会执行一系列的语法检查，从而减少因为强制类型转换带来的异常，但是编译后的代码是不含泛型的，会将泛型限制的元素类型给去掉。</p>
<p>也就是说虽然我声明了rules只能装Rule类型的对象，但是代码被编译后，这个限制就没有了！因为通过语法检查rules里的元素确实是Rule类型的对象，所以并不需要在编译后再去检查。但是问题来了，这种检查只能检查一些显式生命的对象是不是Rule类型，而java是可以通过反射来动态的生成对象的，sprng在参数注入的时候是通过反射实现前端参数自动装载入对象的相关属性！！</p>
<p><strong>所以这样声明的问题在于，由于编译时对rules内元素类型的限制已经被擦除了，所以spring并不知道反射成那种类型的对象，于是就默认的用LinkedHashMap来装载一个对象所有的属性和值，于是rules里面的对象在运行的时候实际上是LinkedHashMap！！！所以spring可能并不支持泛型参数或者需要指定其他条件才能正确的注入泛型参数（这个还没有深究）。</strong></p>
<p>至于以前踩过这方面的坑就是用Gson反序列化带泛型的对象的时候需要额外指定一个参数来说明集合里面的元素类型（具体的我忘了，这个有思路就好）。当时也是觉得很奇妙，为什么不做得智能一点自己识别，我不是已经通过泛型指定类型了么。当时也就抱怨一下，没有怎么多想，现在想起来还真是too young ， too simple。。</p>
<p>这件事让我明白不要盲目的相信自己的经验，计算机肯定是对的。经验解决不了的问题，就从原理一步一步去想，平时学的理论可能看起来没什么用，就好像科普一样，然而在解决一些问题时确是一针见血。多联想，发散思维才能在技术这条路上走得更远。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;记录一下今天在帮同事解决使用spring参数注入问题的时候由于对泛型的理解不到位而遇到的坑。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如下代码所示：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;t
    
    </summary>
    
      <category term="JAVA" scheme="http://kangbiao.org/categories/JAVA/"/>
    
    
      <category term="泛型" scheme="http://kangbiao.org/tags/%E6%B3%9B%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>动态规划问题-怎么扔鸡蛋</title>
    <link href="http://kangbiao.org/2016/01/04/dp-eggs-problem/"/>
    <id>http://kangbiao.org/2016/01/04/dp-eggs-problem/</id>
    <published>2016-01-04T14:17:29.000Z</published>
    <updated>2016-02-19T13:10:30.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>在网上查资料的时候无意间看到了这道谷歌面试题，据说这道面试题刷了好多的大牛(可怕)。读了几篇文章，读懂以后感觉这种解决问题的思路和方法实在是太巧妙了，佩服！在最坏的情况下仍要保证付出最小的代价，这种思想非常值得让人去学习和借鉴，所以写一篇博客记录一下自己对这道题的理解。</p>
</blockquote>
<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p><strong>一幢 200 层的大楼，给你两个鸡蛋，如果在第 n 层扔下鸡蛋，鸡蛋不碎，那么从第 n-1 层扔鸡蛋，都不碎。这两只鸡蛋一模一样，不碎的话可以扔无数次，且鸡蛋在0层不会碎。设计一种策略能保证可以测出鸡蛋恰好会碎的楼层，且如果该策略是最坏的情况所扔次数最少。</strong></p>
<h2 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h2><h3 id="思维分析"><a href="#思维分析" class="headerlink" title="思维分析"></a>思维分析</h3><p><strong>首先我们需要确定最坏情况是什么样子的。</strong><br>假设n是我们的决定第一次尝试的楼层，第一个鸡蛋从n层开始扔。</p>
<ol>
<li>如果没有坏，那么我们就可以从[n+1,100]这个区间扔鸡蛋了，这个时候怎么扔就是我们需要考虑的策略。</li>
<li>但是如果运气比较背，鸡蛋坏了~_~!那么这个时候我们就只有一个鸡蛋了，所以为了满足我们要测出恰好会碎的楼层，我们只能从1楼一直扔到n-1楼。这个时候我们的最坏情况就是n次。</li>
</ol>
<p><strong>鸡蛋没有坏该怎么选择第二次以及以后扔鸡蛋的策略呢？</strong><br>由于没有碎，所以第n层对于我们而言和第0层是一样一样的，所以我们不能采用一层一层增加的方式扔鸡蛋！因为有两个鸡蛋，比较任性。下面提出几个合理的假设，然后分析：</p>
<ol>
<li>增加n层：碎了的话，最坏情况就是我们还要扔2n-n-1+2=n+1次，这个时候最坏情况比第一次还坏，而且照这个趋势下去，最坏情况只会越来越坏，是不可控的，所以这种策略抛弃。</li>
<li>增加大于n层：和增加n层一样，如果第一个鸡蛋碎了那最坏情况就是越来越坏，且比增加n层更坏（可以自己做个简单的算术推导一下）。</li>
<li>增加小于n层：随着n的不断减小，最坏情况下需要仍的次数恒定为n是不会变的（因为第一次就碎了，对于这种情况就是最坏情况）。那么我们需要考虑的是如何使扔的次数最少，想想看，果断取n-1，这样既保证了快速找到刚好碎的楼层，又保证了最坏情况扔的次数最少。</li>
<li>所以我们最后的策略是增加n-1层。</li>
</ol>
<p>以上就是一个分析过程，对于第三次，第四次….都可以递归的进行分析。<br>由于最好情况是第一个鸡蛋一直扔到了100层，而100层与n之间是有一个函数关系的，下面就可以列出一个等式：<br>n+(n-1)+(n-2)+…+1=100=n(n+1)/2<br>所以n约等于14<br>所以第一次从第十四层开始扔，最坏情况就是第一次就碎了，然后需要从1楼开始一层一层的扔，共扔14次。</p>
<h3 id="编程解答"><a href="#编程解答" class="headerlink" title="编程解答"></a>编程解答</h3><p>以上是分析然后数学解答，还有一种代码做法，这里我就直接引用知乎大神的代码了哈。<br><strong>设f(n, m)为n层楼, m个蛋所需次数, 那么它就成了一道DP题</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> functools</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(n, m)</span>:</span></div><div class="line">    <span class="keyword">if</span> n == <span class="number">0</span>:</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span></div><div class="line">    <span class="keyword">if</span> m == <span class="number">1</span>:</div><div class="line">        <span class="keyword">return</span> n</div><div class="line"></div><div class="line">    ans = min([max([f(i - <span class="number">1</span>, m - <span class="number">1</span>), f(n - i, m)]) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, n + <span class="number">1</span>)]) + <span class="number">1</span></div><div class="line">    <span class="keyword">return</span> ans</div><div class="line">print(f(<span class="number">100</span>, <span class="number">2</span>))</div><div class="line">print(f(<span class="number">200</span>, <span class="number">2</span>))</div></pre></td></tr></table></figure></p>
<h2 id="知乎讨论"><a href="#知乎讨论" class="headerlink" title="知乎讨论"></a>知乎讨论</h2><p><a href="http://www.zhihu.com/question/19690210?nr=1" target="_blank" rel="external">扔鸡蛋问题</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;在网上查资料的时候无意间看到了这道谷歌面试题，据说这道面试题刷了好多的大牛(可怕)。读了几篇文章，读懂以后感觉这种解决问题的思路和方法实在是太巧妙了，佩服！在最坏的情况下仍要保证付出最小的代价，这种思想非常值得让人去学习和借鉴，所以写一篇博客记录一
    
    </summary>
    
      <category term="数据结构和算法" scheme="http://kangbiao.org/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/"/>
    
    
  </entry>
  
  <entry>
    <title>Hash原理以及在java集合框架中的应用</title>
    <link href="http://kangbiao.org/2015/12/31/hash-and-java/"/>
    <id>http://kangbiao.org/2015/12/31/hash-and-java/</id>
    <published>2015-12-31T12:55:23.000Z</published>
    <updated>2016-04-17T13:46:00.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>2015年最后一天，写篇文章记录一下我对hash算法的理解以及其在java集合框架中的应用以及其他地方的应用的大概介绍，算是一个比较系统的总结吧。文章参考了网上一些大神的文章（在文章末尾我会把参考文章写上），但是网上的文章很多都没有一个应用场景，读起来虽然知道了原理但是还是用不出来，我会结合平时做项目中遇到的一些问题来说明一些集合框架的具体使用。<br>–<strong>致敬2015</strong></p>
</blockquote>
<h2 id="Hash介绍"><a href="#Hash介绍" class="headerlink" title="Hash介绍"></a>Hash介绍</h2><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p>Hash其实就是散列，就是把任意长度的输入，通过<a href="http://baike.baidu.com/link?url=gIFoAvTWa4IxRQ1q-00JpLTbZu79EXgOJxlhwyHEZJ_Ht1rcAJ4eeoF8VmLgjRYnaTAXvHFqck0i6rKIsjHNzQ7wvaYia-mBPCCim7Fs534ZrlNkXpkjNK2R452uctHpmlnH7CqfXTVD4tCsZeXMxUFavAoRx6nn1SoFi5wJnEGIApg14qi5tn-d60P5QAqm" target="_blank" rel="external">散列算法</a>变成固定长度的输出，由于是不定到定长，所以这种变换是一种压缩映射，输出值的值域远远小于输入值的值域，所以不同的输入可能会有相同的输出，这就是Hash碰撞。</p>
<h3 id="解决冲突"><a href="#解决冲突" class="headerlink" title="解决冲突"></a>解决冲突</h3><ol>
<li><strong><em>开放地址法:</em></strong>当关键字key的哈希地址p=H（key）出现冲突时，以p为基础，产生另一个哈希地址p1，如果p1仍然冲突，再以p为基础，产生另一个哈希地址p2，…，直到找出一个不冲突的哈希地址pi ，将相应元素存入其中。这种方法有一个通用的再散列函数形式：Hi=(H(key)+di)%m   i=1，2，…，n,其中H（key）为哈希函数，m 为表长，di称为增量序列。增量序列的取值方式不同，相应的再散列方式也不同。</li>
<li><strong><em>再hash法:</em></strong>当发生冲突时再次散列，如果依然冲突的话，可以变为多重散列或者结合其他解决冲突的方法使用。</li>
<li><strong><em>链地址法:</em></strong>在发生冲突的地方，以链表的形式存储（HashMap就是这么做的）</li>
<li><strong><em>建立公共溢出区:</em></strong>建立一个公共溢出区，将冲突的值放在溢出区。</li>
</ol>
<h3 id="什么是哈希表？"><a href="#什么是哈希表？" class="headerlink" title="什么是哈希表？"></a>什么是哈希表？</h3><p>哈希表也叫散列表，是根据关键字而直接进行访问内存存储位置的数据结构。它通过把关键字通过散列函数映射到哈希表中的一个位置来访问记录，以加快查找的速度。存放记录的数组叫做散列表。哈希表就是一种依托于数组的数据结构，只不过增加了一些规则来在数组上存储元素和访问元素。</p>
<h2 id="hash在java中的应用"><a href="#hash在java中的应用" class="headerlink" title="hash在java中的应用"></a>hash在java中的应用</h2><h3 id="java对象的equals和hashCode方法"><a href="#java对象的equals和hashCode方法" class="headerlink" title="java对象的equals和hashCode方法"></a>java对象的equals和hashCode方法</h3><p>java中Object类默认的equals方法和==一样，是比较两个对象的地址是否相等的，hashCode方法是返回对象的存储地址的（hashCode是一个native方法哦，是通过JNI用其他语言实现的）。</p>
<p>但是一般情况下，我们并不需要去比较两个对象的地址（需要的时候我们完全可以用==），所以我们可以选择重写equals方法来比较对象的内容，在我们的业务逻辑里面，对于一个人物实体类，只要身份证属性相同，就可以认为这两个人相同，所以我们选择覆盖equals方法来比较身份证属性。</p>
<p>重写equals方法后，一定要记得重写hashCode方法，因为如果该对象如果出现在了使用了Hash表结构的java集合框架中的话，会首先比较该对象的hashCode方法，如果相同，再比较equals方法，如果相同，则覆盖之前的对象，不同，则用链表的方式存储这两个对象。试想一下，对于一个身份证信息相同的对象，如果只重写了equals方法，那么这两个在业务逻辑上应该被判断为相同的对象就会被重复存储。</p>
<p>java中对于equals和hashCode有两个约定：</p>
<ol>
<li>当obj1.equals(obj2)为true时，obj1.hashCode() == obj2.hashCode()必须为true</li>
<li>当obj1.hashCode() == obj2.hashCode()为false时，obj1.equals(obj2)必须为false</li>
</ol>
<blockquote>
<p>也就是说，hashcode相等，equals可能不相等，但是equals相等代表这两个对象是是一个对象，所以hashCode必须相等。</p>
</blockquote>
<h3 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h3><p>HashMap使用数组加链表的方式实现的，当存在hashCode相同但是equals返回false的两个对象时，会使用链地址法来解决冲突。</p>
<p>HashMap中我们最常用的就是put(K, V)和get(K)。我们都知道，HashMap的K值是唯一的，那如何保证唯一性呢？我们首先想到的是用equals比较，没错，这样可以实现，但随着内部元素的增多，put和get的效率将越来越低，这里的时间复杂度是O(n)，假如有1000个元素，put时需要比较1000次。</p>
<p>实际上，HashMap很少会用到equals方法，因为HashMap通过一个哈希表管理所有元素，当我们调用put存值时，HashMap首先会调用K的hashCode方法，获取哈希码，通过哈希码快速找到某个存放位置，这个位置可以被称之为<strong>bucketIndex</strong>，通过上面所述hashCode的协定可以知道，如果hashCode不同，equals一定为false，如果hashCode相同，equals不一定为true。</p>
<p>所以理论上，hashCode可能存在冲突的情况，有个专业名词叫碰撞，当碰撞发生时，计算出的<strong>bucketIndex</strong>也是相同的，这时会取到<strong>bucketIndex</strong>位置已存储的元素，最终通过equals来比较，equals方法就是哈希码碰撞时才会执行的方法，所以前面说HashMap很少会用到equals。HashMap通过hashCode和equals最终判断出K是否已存在，如果hashCode和equals相等，则使用新V值替换旧V值，（若hashCode相等当equals为false，则链式存储存储解决冲突）并返回旧V值，如果不存在 ，则存放新的键值对<k, v="">到<strong>bucketIndex</strong>位置。<br>存放元素的过程如下图所示：</k,></p>
<p><img src="http://7xlqn0.com1.z0.glb.clouddn.com/20131125091558218.jpg" alt="hashmap存放对象遇到的几种情况"></p>
<p>HashMap去除一个元素就很简单了，如下代码所示<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(Object key)</span> </span>&#123;</div><div class="line">        <span class="comment">// 若为null，调用getForNullKey方法返回相对应的value</span></div><div class="line">        <span class="keyword">if</span> (key == <span class="keyword">null</span>)</div><div class="line">            <span class="keyword">return</span> getForNullKey();</div><div class="line">        <span class="comment">// 根据该 key 的 hashCode 值计算它的 hash 码</span></div><div class="line">        <span class="keyword">int</span> hash = hash(key.hashCode());</div><div class="line">        <span class="comment">// 取出 table 数组中指定索引处的值</span></div><div class="line">        <span class="keyword">for</span> (Entry&lt;K, V&gt; e = table[indexFor(hash, table.length)]; e != <span class="keyword">null</span>; e = e.next) &#123;</div><div class="line">            Object k;</div><div class="line">            <span class="comment">//若搜索的key与查找的key相同，则返回相对应的value</span></div><div class="line">            <span class="keyword">if</span> (e.hash == hash &amp;&amp; ((k = e.key) == key || key.equals(k)))</div><div class="line">                <span class="keyword">return</span> e.value;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>需要注意的是在HashMap中，不是直接用的对象的hashcode作为对象存储地址的，而是再次hash，这么做可以防止重写hashCode方法以后使存储地址非法。内部hash实现如下<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(<span class="keyword">int</span> h)</span> </span>&#123;</div><div class="line">        h ^= (h &gt;&gt;&gt; <span class="number">20</span>) ^ (h &gt;&gt;&gt; <span class="number">12</span>);</div><div class="line">        <span class="keyword">return</span> h ^ (h &gt;&gt;&gt; <span class="number">7</span>) ^ (h &gt;&gt;&gt; <span class="number">4</span>);</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>（&gt;&gt;&gt;是无符号右移）</p>
<p>HashMap内部定义了一个Entity泛型对象来存储每个键值对信息。如下所示：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Map</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</div><div class="line">        <span class="keyword">final</span> K key;</div><div class="line">        V value;</div><div class="line">        Entry&lt;K,V&gt; next;</div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> hash;</div><div class="line"></div><div class="line">        <span class="comment">/**</span></div><div class="line">         * Creates new entry.</div><div class="line">         */</div><div class="line">        Entry(<span class="keyword">int</span> h, K k, V v, Entry&lt;K,V&gt; n) &#123;</div><div class="line">            value = v;</div><div class="line">            next = n;</div><div class="line">            key = k;</div><div class="line">            hash = h;</div><div class="line">        &#125;</div><div class="line">        .......</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>Entry为HashMap的内部类，它包含了键key、值value、下一个节点next，以及hash值，这是非常重要的，正是由于Entry才构成了table数组的项为链表。</p>
<h3 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a>HashSet</h3><p>知道了HashMap以后，HashSet其实就是HashMap的键的存储。所以就不赘述啦~~</p>
<h2 id="hash在其他地方的应用"><a href="#hash在其他地方的应用" class="headerlink" title="hash在其他地方的应用"></a>hash在其他地方的应用</h2><ol>
<li>MD5加密是将任意长度的字符串散列成32位的定长字符串（由小写字母和数字组成）。</li>
<li>SSH中对证书信息进行散列获取证书信息。</li>
<li>SHA1加密算法也是一种运用散列进行加密的算法。</li>
</ol>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol>
<li><a href="http://blog.csdn.net/chenhuajie123/article/details/9210529" target="_blank" rel="external">hash表总结</a></li>
<li><a href="https://zh.wikipedia.org/wiki/%E5%93%88%E5%B8%8C%E8%A1%A8" target="_blank" rel="external">维基百科hash表定义</a></li>
<li><a href="http://www.cnblogs.com/skywang12345/p/3324958.html" target="_blank" rel="external">hashCode和equals详解</a></li>
<li><a href="http://blog.csdn.net/ghsau/article/details/16843543" target="_blank" rel="external">hashmap深度解析</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;2015年最后一天，写篇文章记录一下我对hash算法的理解以及其在java集合框架中的应用以及其他地方的应用的大概介绍，算是一个比较系统的总结吧。文章参考了网上一些大神的文章（在文章末尾我会把参考文章写上），但是网上的文章很多都没有一个应用场景，读
    
    </summary>
    
      <category term="JAVA" scheme="http://kangbiao.org/categories/JAVA/"/>
    
    
      <category term="hash" scheme="http://kangbiao.org/tags/hash/"/>
    
  </entry>
  
  <entry>
    <title>hadoop学习笔记之MapReduce初探</title>
    <link href="http://kangbiao.org/2015/12/28/hadoop-learn-note-2015-12-28/"/>
    <id>http://kangbiao.org/2015/12/28/hadoop-learn-note-2015-12-28/</id>
    <published>2015-12-28T12:25:56.000Z</published>
    <updated>2016-07-11T12:11:10.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><blockquote>
<p>在python和swift中，map，reduce都是一种高阶函数（还有filter），那么什么是高阶函数呢？这里引用一下廖雪峰大神的总结，高阶函数就是指函数参数可以接收其他函数，还有一种函数叫作偏函数，就是指函数的返回值是一个函数。<br>高阶函数和偏函数的概念可以阅读函数式编程一书得到参考<br>java8的lambda表达式就是一种高阶函数的实现。</p>
</blockquote>
<p>好吧，回归正题，那么什么是map，什么又是reduce呢？<br><strong>map</strong>：map就是指把输入的数据集中的每一个元素进行处理后输出，这种输入输出通常是键值对形式的。<br><strong>reduce</strong>：reduce的英文释义是规约，也就是说reduce函数是将一定的数据集进行循环的处理得到最终的结果。比如找出每个数据集中的最大值。</p>
<h2 id="Mapper和Reducer"><a href="#Mapper和Reducer" class="headerlink" title="Mapper和Reducer"></a>Mapper和Reducer</h2><p><strong>Mapper</strong>是泛型类型，分别是map函数的输入键，输入值，输出建和输出值，hadoop在java自带的基本类型之上还封装了一套适用于网络序列化传输的基本类型，这些类型位于or.apache.hadoop.io包中，例如Text类型相当于java的String类型。<br><strong>Reducer</strong>也是泛型类型，类型参数和Mapper一样，Reducer提供了强大的数据比较和抽取能力。<br><strong>Job</strong>是用来指定作业执行规范的，主要包括如下几步：</p>
<ol>
<li>设置作业完整的类名</li>
<li>设置作业名称</li>
<li>设置输入和输入源（可以来自网络，可以来自文件系统）</li>
<li>设置map（即对数据进行处理的Mapper实现类）和设置reduce（Reducer的实现类）。</li>
</ol>
<h2 id="新旧api差别"><a href="#新旧api差别" class="headerlink" title="新旧api差别"></a>新旧api差别</h2><blockquote>
<p>参考官网</p>
</blockquote>
<h2 id="MapReduce的横向（水平）扩展"><a href="#MapReduce的横向（水平）扩展" class="headerlink" title="MapReduce的横向（水平）扩展"></a>MapReduce的横向（水平）扩展</h2><blockquote>
<p>为了实现横向扩展，需要将数据存储在类似于HDFS的分布式文件系统中。</p>
</blockquote>
<p>在MapReduce的作业中，有两类节点控制着作业的执行，一类是jobtracker（作业节点）和一系列的tasktracker（任务节点），一个作业是由多个任务（map任务和reduce任务）组成的。</p>
<p>Hadoop将数据分为大小相等的数据块，每个数据块就是一个分片，并且为每个分片指定一个map任务，由该任务来运行用户自定义的map函数从而处理分片中的每条记录。</p>
<p>分片的大小决定了程序的效率和资源的利用率，如果分片太小，那么管理分片的总时间和构建map任务的时间将会决定整个处理时间，如果分片太大，又没有充分利用map函数提供的处理能力，所以合适的分片大小至关重要。一个合理的分片大小大概是HDFS的一个块的大小。默认是64MB。如果超过了该大小，那么输入源的数据就会存储在两个机架上面，这样就会产生网络传输，降低了效率。</p>
<p>对于map任务，一般运行在输入数据存储的机器上，这样不需要使用网络带宽资源，提高了IO效率。如果该map任务在处理其他的任务，则需要协调其他机架上面的map任务来进行处理，这样还是会产生网络传输。但是这么做，会大大的减少这种情况的发生。</p>
<p>map任务的输出一般都是存储在任务执行的机器上面，因为map输出的数据大多是一个中间数据，只需要临时存储，在传给reduce任务处理之后，就可以删除该中间结果。如果中间数据传输给reduce任务失败，则会在另一个节点上重新运行map任务重新传输从而避免再次失败。</p>
<p>reduce任务可以接收来自多个map任务的输出，这之间复杂的数据传输流称为shuffle。shuffle就是怎样把map task的输出结果有效地传送到reduce端，也可以理解为 Shuffle描述着数据从map task输出到reduce task输入的这段过程。<br>下图是官方的shuffle解释图<br><img src="http://7xlqn0.com1.z0.glb.clouddn.com/shuffle-official.png" alt="shuffle官网解释图"><br><a href="http://langyu.iteye.com/blog/992916" target="_blank" rel="external">shuffle参考资料</a></p>
<h2 id="combiner"><a href="#combiner" class="headerlink" title="combiner"></a>combiner</h2><p>为了减少map和reduce之间的数据传输量，充分利用集群之间的带宽，可以对map的输出执行一次或者多次的combiner函数，相当于对于单个map进行的规约操作（reduce是对于多个map任务的规约）.但是combiner的适用场景有限，例如平均数的计算可能就不适用-((x+y+z+a)/4+(b+c)/2)/2!=(a+b+c+x+y+z)/6，所以该函数的适用范围为对分片数据规约不会影响整个结果的场景。</p>
<h2 id="Streaming-API"><a href="#Streaming-API" class="headerlink" title="Streaming API"></a>Streaming API</h2><p>Streaming API 使得我们可以用其他编程语言实现自己的map和reduce函数，例如用c++实现，提高程序的处理效率。<br>该API使用标准输入输出流作为hadoop和不同语言编写的map和reduce任务之间的接口。<br>当使用Streaming时需要在hadoop的运行命令里面指定streaming.jar文件的位置从而让hadoop支持其他语言。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;基本概念&quot;&gt;&lt;a href=&quot;#基本概念&quot; class=&quot;headerlink&quot; title=&quot;基本概念&quot;&gt;&lt;/a&gt;基本概念&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;在python和swift中，map，reduce都是一种高阶函数（还有filter），那么什么是
    
    </summary>
    
      <category term="大数据" scheme="http://kangbiao.org/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
      <category term="hadoop" scheme="http://kangbiao.org/tags/hadoop/"/>
    
  </entry>
  
  <entry>
    <title>JAVA Servlet工作原理</title>
    <link href="http://kangbiao.org/2015/12/20/servlet-principle/"/>
    <id>http://kangbiao.org/2015/12/20/servlet-principle/</id>
    <published>2015-12-20T14:55:22.000Z</published>
    <updated>2016-04-02T16:04:06.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="servlet容器加载顺序"><a href="#servlet容器加载顺序" class="headerlink" title="servlet容器加载顺序"></a>servlet容器加载顺序</h1><ol>
<li>当 Servlet 容器（比如 Apache Tomcat ）启动后，会部署和加载所有 web 应用。当web 应用被加载，Servlet 容器会创建一次 <strong><em>ServletContext</em></strong>，然后将其保存在服务器的内存中。</li>
<li>web 应用的  web.xml 被解析，找到其中所有  servlet 、 filter 和  Listener 或  @WebServlet 、 @WebFilter 和  @WebListener 注解的内容，创建一次并保存到服务器的内存中。</li>
<li>对于所有过滤器会立即调用init() 。</li>
<li>当Servlet配置的 <strong><em>load-on-startup</em></strong> 或者 @WebServlet(loadOnStartup) 设置了一个大于 0 的值，则同样会在启动的时候立即调用 init() 方法。“<strong><em>load-on-startup</em></strong>”中的值表示那些 Servlet 会以相同顺序初始化。如果配置的值相同，会遵循  web.xml 中指定的顺序或 @WebServlet 类加载的顺序。另外，如果不设置 “<strong><em>load-on-startup</em></strong>” 值， init() 方法只在第一次 HTTP 请求命中问题中的 Servlet 时才被调用。</li>
<li>当 Servlet 容器停止，将卸载所有 web 应用，调用所有初始化的 Servlet 和过滤器的  destroy() 方法，最后回收 <strong><em>ServletContext</em></strong>和所有  Servlet 、Filter 与  Listener 实例。</li>
</ol>
<h1 id="HttpServletRequest-与-HttpServletResponse"><a href="#HttpServletRequest-与-HttpServletResponse" class="headerlink" title="HttpServletRequest 与 HttpServletResponse"></a>HttpServletRequest 与 HttpServletResponse</h1><p>Servlet 容器附加在一个 web 服务上，这个 web 服务会在某个端口号上监听 HTTP 请求，在开发环境中这个端口通常为 8080，生产环境中通常为 80。当客户端（web 浏览器）发送了一个 HTTP 请求，Servlet 容器会创建新的 <strong><em>HttpServletRequest</em></strong> 和  <strong><em>HttpServletResponse</em></strong> 对象，传递给已创建好并且请求的 URL 匹配  url-pattern 的  Filter 和  Servlet 实例中的方法，所有工作都在同一个线程中处理。</p>
<p>request 对象可以访问所有该 HTTP 请求中的信息，例如 request header 和 request body。response 对象为你提供需要的控制和发送 HTTP 响应方法，例如设置 header 和 body（通常会带有 JSP 文件中的 HTML 内容）。提交并完成HTTP 响应后，将回收 request 和 response 对象。</p>
<h1 id="HttpSession"><a href="#HttpSession" class="headerlink" title="HttpSession"></a>HttpSession</h1><p>当用户第一次访问该 web 应用时，会通过 request.getSession() 第一次获得  <strong><em>HttpSession</em></strong> 。之后 Servlet 容器将会创建 <strong><em>HttpSession</em></strong> ，生成一个唯一的 ID（可以通过  session.getId() 获取）并储存在服务器内存中。然后 Servlet 容器在该次 HTTP 响应的  Set-Cookie 头部设置一个 Cookie ，以 JSESSIONID 作为 Cookie 名字，那个唯一的 session ID 作为  Cookie 的值。</p>
<p>按照 HTTP cookie 规则 （正常 web 浏览器和 web 服务端必须遵循的标准），当 cookie 有效时，要求客户端（浏览器）在后续请求的  Cookie 头中返回这个 cookie。使用浏览器内置的 HTTP 流量监控器可以查看它们（在 Chrome、Firefox23+、IE9+ 中按 F12，然后查看 Net/Network 标签）。Servlet 容器将会确定每个进入的 HTTP 请求的  Cookie 头中是否存在名为 JSESSIONID 的 cookie，然后用它的值（session ID）从服务端内存中找到关联的  HttpSession 。</p>
<p>在 web.xml 中设置  session-timeout ，默认值为 30 分钟。超时到达之前  HttpSession 会一直存活。所以当客户端不再访问该 web 应用超过 30 分钟后，Servlet 容器就会回收这个 session。后续每个请求，即使指定 cookie 名称也不能再访问到相同的 session。Servlet 容器会创建一个新的  Cookie 。</p>
<p>另一方面，客户端上的 session cookie 有一个默认存活时间，该事件和该浏览器实例运行时间一样长。所以，当客户端关闭该浏览器实例（所有标签和窗口）后，这个 session 就会被客户端回收。新浏览器实例不再发送与该 session 关联的 cookie。一个新的 request.getSession() 将会返回新的  HttpSession 并设置一个拥有新  session ID 的 cookie。</p>
<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><ol>
<li><strong><em>ServletContext</em></strong> 与 web 应用存活时间一样长。它被所有 session 中的所有请求共享。</li>
<li>只要客户端一直与相同浏览器实例的web应用交互并且没有超时，HttpSession就会存在。</li>
<li><strong><em>HttpServletRequest</em></strong> 和 <strong><em>HttpServletResponse</em></strong> 的存活时间为客户端发送完成到完整的响应（web 页面）到达的这段时间。不会被其他地方共享。</li>
<li>所有 Servlet 、 Filter  和  Listener  对象在 web 应用运行时都是活跃的。它们被所有 session 中的请求共享。</li>
<li>设置在  <strong><em>HttpServletRequest</em></strong> 、 <strong><em>HttpServletResponse</em></strong>  和  <strong><em>HttpSession</em></strong>  中的所有属性在Servlet存活时都会一直保持存活。</li>
</ol>
<h1 id="线程安全"><a href="#线程安全" class="headerlink" title="线程安全"></a>线程安全</h1><p>Servlet 和 Filter 被所有请求共享。那是 Java 的一个优点，使得多个不同线程（读取 HTTP 请求）可以使用同一个实例。否则为每个请求重新创建线程的开销实在过于昂贵。</p>
<p>但永远不要将任何 request 或 session 域中的数据赋值给 servlet 或 filter 的实例变量。它将会被所有其他 session 中的所有请求共享。那是非线程安全的！下面的示例对这种情况进行了展示：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExampleServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Object thisIsNOTThreadSafe;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</div><div class="line">        Object thisIsThreadSafe;</div><div class="line"></div><div class="line">        thisIsNOTThreadSafe = request.setParameter(<span class="string">"foo"</span>); <span class="comment">// 不安全，为所有请求所共享</span></div><div class="line">        thisIsThreadSafe = request.getParameter(<span class="string">"foo"</span>); <span class="comment">// 线程安全</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;servlet容器加载顺序&quot;&gt;&lt;a href=&quot;#servlet容器加载顺序&quot; class=&quot;headerlink&quot; title=&quot;servlet容器加载顺序&quot;&gt;&lt;/a&gt;servlet容器加载顺序&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;当 Servlet 容器（比如 Apac
    
    </summary>
    
      <category term="JAVA" scheme="http://kangbiao.org/categories/JAVA/"/>
    
    
      <category term="servlet" scheme="http://kangbiao.org/tags/servlet/"/>
    
  </entry>
  
  <entry>
    <title>理解JAVA MQ消息中间件</title>
    <link href="http://kangbiao.org/2015/12/15/MQ-learning/"/>
    <id>http://kangbiao.org/2015/12/15/MQ-learning/</id>
    <published>2015-12-15T14:00:00.000Z</published>
    <updated>2016-04-02T16:03:42.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="MQ的几种消息传递方式"><a href="#MQ的几种消息传递方式" class="headerlink" title="MQ的几种消息传递方式"></a>MQ的几种消息传递方式</h2><h3 id="发布订阅模式"><a href="#发布订阅模式" class="headerlink" title="发布订阅模式"></a>发布订阅模式</h3><p>发布订阅模式有点类似于我们日常生活中订阅报纸。每年到年尾的时候，邮局就会发一本报纸集合让我们来选择订阅哪一个。在这个表里头列了所有出版发行的报纸，那么对于我们每一个订阅者来说，我们可以选择一份或者多份报纸。比如北京日报、潇湘晨报等。那么这些个我们订阅的报纸，就相当于发布订阅模式里的topic。有很多个人订阅报纸，也有人可能和我订阅了相同的报纸。那么，在这里，相当于我们在同一个topic里注册了。对于一份报纸发行方来说，它和所有的订阅者就构成了一个1对多的关系。这种关系如下图所示：<br><img src="http://7xlqn0.com1.z0.glb.clouddn.com/mq-topic.jpg" alt="发布订阅模式"></p>
<h3 id="点对点模式"><a href="#点对点模式" class="headerlink" title="点对点模式"></a>点对点模式</h3><p>点对点模式就相当于打电话，由两端的双方独享这一通信链路<br><img src="http://7xlqn0.com1.z0.glb.clouddn.com/mq-queue.jpg" alt="点对点模式"></p>
<h3 id="扩展的对点模式"><a href="#扩展的对点模式" class="headerlink" title="扩展的对点模式"></a>扩展的对点模式</h3><p> 和前面两种方式比较起来，request-response的通信方式很常见，但是不是默认提供的一种模式。在前面的两种模式中都是一方负责发送消息而另外一方负责处理。而我们实际中的很多应用相当于一种一应一答的过程，需要双方都能给对方发送消息。于是请求-应答的这种通信方式也很重要。它也应用的很普遍。<br> 请求-应答方式并不是JMS规范系统默认提供的一种通信方式，而是通过在现有通信方式的基础上稍微运用一点技巧实现的。下图是典型的请求-应答方式的交互过程：<br><img src="http://7xlqn0.com1.z0.glb.clouddn.com/mq-two.jpg" alt="request-response"></p>
<h2 id="我在项目中的理解"><a href="#我在项目中的理解" class="headerlink" title="我在项目中的理解"></a>我在项目中的理解</h2><p>MQ其实就是一个消息中转站。<br>在企业级的应用里，会有一个服务器集群来作为这个中转站，这个集群中有主从，有备份，有路由，有网关。此时MQ就是就是一种中间件，在个人的实验中体会不到这种感觉。<br>企业级的MQ不仅仅实现了简单的消息中转站的功能，还实现了消息生产者和消息消费者的认证功能（即他们能消费和生产哪些具体的topic）。<br>附一张企业MQ的架构图<br><img src="http://7xlqn0.com1.z0.glb.clouddn.com/mq-with-boker.png" alt="mq集群"></p>
<h2 id="MQ的缺点"><a href="#MQ的缺点" class="headerlink" title="MQ的缺点"></a>MQ的缺点</h2><ol>
<li>mq的主要问题在于重复生产和重复消费(延迟也是一个很大的缺点，但是这可以换来性能上的提升，监听获取信息肯定比轮询获取信息的效率高)。</li>
<li>比如几个业务系统需要消费一个点对点模式的mq消息，其中一个业务系统消费成功了但是并没有向mq服务器成功发送消费成功的确认ack，导致消息在mq服务器中依然存在，从而导致其他业务系统的重复消费。</li>
<li>再比如生产者如果没有接收到mq服务器的确认消息，就会重复生产，如果在服务器没有相应的去重措施，就会带来很大的隐患。</li>
<li>所以在使用MQ的时候，最重要的问题不是在于怎么去用它，而是怎么在业务系统中解决重复生产和重复消费的问题。具体的得根据系统允许的容错率和业务来进行相应的处理。</li>
<li>我主要说一下在服务器端对MQ进行去重的方法，如果是同一topic的信息，可以通过对消息内容进行摘要运算从而达到简单的去重效果。</li>
</ol>
<h2 id="实现可靠MQ和去重参考方法"><a href="#实现可靠MQ和去重参考方法" class="headerlink" title="实现可靠MQ和去重参考方法"></a>实现可靠MQ和去重参考方法</h2><ol>
<li><p>消息的可靠性设计，目前有2种模式：模式1是采用Notify的方式，先发送半消息，业务操作成功后最后提交完整消息，同时提供业务操作的检查接口，这种模式实现消息的最终一致性；模式2将业务数据和消息数据先都存在业务数据库里面，通过数据库的事务保证一致性，随后将消息转发给MQ。模式1的缺点是业务侵入性高，方案比较复杂，需要重新实现；模式2的缺点是消息数据可能会散落在各个地方，包括业务系统，而且可以集成现有MQ。</p>
</li>
<li><p>消息去重设计，也有2种模式：模式1是消费者根据自己的业务实现去重，模式2是在消费者端增加一个数据库表专门记录已经消费过的消息，不需要消费者根据业务去做去重。</p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;MQ的几种消息传递方式&quot;&gt;&lt;a href=&quot;#MQ的几种消息传递方式&quot; class=&quot;headerlink&quot; title=&quot;MQ的几种消息传递方式&quot;&gt;&lt;/a&gt;MQ的几种消息传递方式&lt;/h2&gt;&lt;h3 id=&quot;发布订阅模式&quot;&gt;&lt;a href=&quot;#发布订阅模式&quot; cla
    
    </summary>
    
      <category term="JAVA" scheme="http://kangbiao.org/categories/JAVA/"/>
    
    
      <category term="MQ" scheme="http://kangbiao.org/tags/MQ/"/>
    
  </entry>
  
  <entry>
    <title>JVM内存自动管理机制</title>
    <link href="http://kangbiao.org/2015/12/03/jvm-memory-manage/"/>
    <id>http://kangbiao.org/2015/12/03/jvm-memory-manage/</id>
    <published>2015-12-03T14:20:56.000Z</published>
    <updated>2016-02-19T12:32:48.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>本文主要总结java虚拟机的内存管理机制,不同的数据类型存在在怎样的一块内存区域中,不同的内存区域有哪些不同点,怎样回收过了生命周期的内存,采取何种策略去回收这些对象或者常量,不同的回收算法的优缺点.什么情况下会产生内存溢出异常以及该采取怎样的措施避免内存溢出,以及一些常用的虚拟机性能监控工具和故障排除工具<br>-&lt;&lt;深入理解java虚拟机&gt;&gt;读书笔记</p>
</blockquote>
<h2 id="jvm内存区域"><a href="#jvm内存区域" class="headerlink" title="jvm内存区域"></a>jvm内存区域</h2><p><strong>虚拟机管理的运行时数据区域如下图所示</strong><br><img src="http://7xlqn0.com1.z0.glb.clouddn.com/20131106214200_112.jpg" alt="虚拟机运行时数据区域图例"></p>
<h3 id="方法区"><a href="#方法区" class="headerlink" title="方法区"></a>方法区</h3><p>方法区是各个线程共享的内存区域(这样就能理解为什么需要线程同步和加锁了,当然还与java数据访问时数据复制来复制去有关),用于存储已被虚拟机加载的类信息,常量,静态变量,JIT即时编译后的代码等.<br>方法区的数据类型复杂,而且jvm规范也没有明确指定方法区的内存使用和回收策略,所以不同的虚拟机对于方法区的内存回收都有不同的机制.下文介绍.</p>
<h3 id="运行时常量池"><a href="#运行时常量池" class="headerlink" title="运行时常量池"></a>运行时常量池</h3><p>运行时常量池是方法区的一部分,存储编译时或者运行时产生的字面常量或者其他信息.</p>
<h3 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h3><p>堆也是被各个线程共享的内存区域,虚拟机主要管理的内存区域,是java存放对象数据的地方,这里面也有指针,因为对象数据里面可能还有其他对象的引用,还有方法区常量池常量的引用.还有数组也是在堆上分配内存.</p>
<h3 id="虚拟机栈"><a href="#虚拟机栈" class="headerlink" title="虚拟机栈"></a>虚拟机栈</h3><p>线程私有,与线程同生同灭.用于存储java运行时的内存模型,也就是每个方法执行时的一个栈帧,该栈帧存储了局部变量表,操作数栈,动态链表,方法出口等运行时信息.<br>对于一个方法开始执行到执行结束就是一个栈帧在虚拟机中入栈和出栈的过程.</p>
<h3 id="程序计数器"><a href="#程序计数器" class="headerlink" title="程序计数器"></a>程序计数器</h3><p>和虚拟栈帧一样,该内存区域的生命周期也是在一个线程的执行周期内.可以看作当前线程执行字节码行号的指示器,字节码的解释执行工作就是通过这个来确定循环,判断,跳转,异常处理以及线程恢复等功能.<br>每个线程拥有一个独立的程序计数器内存区域可以使得多线程环境下线程能接着上一个时间片继续执行.</p>
<h3 id="本地方法栈"><a href="#本地方法栈" class="headerlink" title="本地方法栈"></a>本地方法栈</h3><p>本地方法栈与虚拟机栈的作用几乎相同,不同的地方在于虚拟机栈用于服务java方法,而本地方法栈可以描述native方法,即虚拟机规范规定的可使用的其他语言.</p>
<h3 id="直接内存"><a href="#直接内存" class="headerlink" title="直接内存"></a>直接内存</h3><p>直接内存不是虚拟机运行时数据取的一部分<br>在jdk1.4后引入了一种通道和缓冲区的I/O方式,使用native函数库直接分配堆外内存,然后通过一个存储在java堆中的DirectByteBuffer对象作为这块内存的引用直接进行操作,这样能在一定的场景下显著提高性能,避免了在java堆中和native堆中来回复制数据.</p>
<h3 id="数据在上述内存区域的分布"><a href="#数据在上述内存区域的分布" class="headerlink" title="数据在上述内存区域的分布"></a>数据在上述内存区域的分布</h3><blockquote>
<p>对象的两种不同访问形式</p>
</blockquote>
<p><img src="http://7xlqn0.com1.z0.glb.clouddn.com/1348658605_5211.jpg" alt="直接指针方式访问对象"><br><strong>这样看句柄就是一系列的指针和其他数据组成的数据结构,果然是要好好学习数据结构</strong><br><img src="http://7xlqn0.com1.z0.glb.clouddn.com/1348659242_7055.jpg" alt="间接指针访问对象"></p>
<h2 id="jvm内存溢出"><a href="#jvm内存溢出" class="headerlink" title="jvm内存溢出"></a>jvm内存溢出</h2><blockquote>
<p>内存溢出即指上述内存区域存放的数据结构的总量大于限制的最大大小,导致虚拟机跑出内存溢出异常.</p>
</blockquote>
<h2 id="虚拟机垃圾收集器"><a href="#虚拟机垃圾收集器" class="headerlink" title="虚拟机垃圾收集器"></a>虚拟机垃圾收集器</h2><blockquote>
<p>如何判断对象需要被回收？<br>对于不同的算法有不同的判断方式</p>
</blockquote>
<h3 id="堆中垃圾回收算法"><a href="#堆中垃圾回收算法" class="headerlink" title="堆中垃圾回收算法"></a>堆中垃圾回收算法</h3><p><strong>引用计数算法</strong><br>给每个对象添加一个引用计数器，每当有一个地方引用它时，计数器加一，引用失效则减一。<br>优点：实现简单，判断效率高<br>缺点：当对象存在相互引用时，不能够回收此类对象<br><strong>可达性分析算法</strong><br>可达性算法的核心在于找到一系列的根节点，并且判断对象到这些根节点是否可达。<br>可作为根节点的对象有：</p>
<ol>
<li>虚拟机栈中引用的对象</li>
<li>方法取中静态属性引用的对象</li>
<li>方法取中常量引用的对象</li>
<li>本地方法栈中JNI引用的对象</li>
</ol>
<p><strong>四种引用</strong><br>强引用-软引用-弱引用-虚引用</p>
<h3 id="方法区中垃圾回收算法"><a href="#方法区中垃圾回收算法" class="headerlink" title="方法区中垃圾回收算法"></a>方法区中垃圾回收算法</h3><p><strong>标记-清除算法</strong><br>首先标记出所有需要回收的对象，在标记完成后统一进行回收，但是缺点就是会造成大量的内存碎片。导致之后给大的对象分配内存无可用空间。<br><strong>复制算法</strong><br>将可用的内存分为两半，一次只使用其中的一半，当使用完以后，将还活着的对象全部复制到另一半内存空间中，然后清理掉原来的那半内存，缺点就是代价太高，需要牺牲一半的内存。<br><strong>标记-整理算法</strong><br>将所有的对象像一端移动，然后直接清理掉其他的对象（98%的对象生命周期都很短）</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文主要总结java虚拟机的内存管理机制,不同的数据类型存在在怎样的一块内存区域中,不同的内存区域有哪些不同点,怎样回收过了生命周期的内存,采取何种策略去回收这些对象或者常量,不同的回收算法的优缺点.什么情况下会产生内存溢出异常以及该采取怎样的措施
    
    </summary>
    
      <category term="JAVA" scheme="http://kangbiao.org/categories/JAVA/"/>
    
    
      <category term="jvm" scheme="http://kangbiao.org/tags/jvm/"/>
    
      <category term="内存管理" scheme="http://kangbiao.org/tags/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>前端开发神器emmet使用教程</title>
    <link href="http://kangbiao.org/2015/11/24/emmet-usage/"/>
    <id>http://kangbiao.org/2015/11/24/emmet-usage/</id>
    <published>2015-11-24T12:20:22.000Z</published>
    <updated>2016-04-02T16:02:52.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>Emmet的前身是大名鼎鼎的Zen coding</p>
<p>使用方法:结合下面的指令,然后摁下TAB键生效</p>
<p>该插件在eclipse,sublime,idea等开发工具上面都可以快速的安装</p>
</blockquote>
<p><img src="http://7xlqn0.com1.z0.glb.clouddn.com/Emmet使用.png" alt="emmet快速参考"></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Emmet的前身是大名鼎鼎的Zen coding&lt;/p&gt;
&lt;p&gt;使用方法:结合下面的指令,然后摁下TAB键生效&lt;/p&gt;
&lt;p&gt;该插件在eclipse,sublime,idea等开发工具上面都可以快速的安装&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
    
    </summary>
    
      <category term="web前端" scheme="http://kangbiao.org/categories/web%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="emmet" scheme="http://kangbiao.org/tags/emmet/"/>
    
  </entry>
  
  <entry>
    <title>设计模式总结</title>
    <link href="http://kangbiao.org/2015/11/21/code-design/"/>
    <id>http://kangbiao.org/2015/11/21/code-design/</id>
    <published>2015-11-21T14:20:56.000Z</published>
    <updated>2016-04-02T16:02:32.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>学一样东西,自己另外举个例子实现一遍,才能知道里面的原理.记录一下学习的几种基本的设计模式</p>
</blockquote>
<h2 id="文件结构"><a href="#文件结构" class="headerlink" title="文件结构"></a>文件结构</h2><p><strong>几种设计模式的文件结构如下图所示</strong><br><img src="http://7xlqn0.com1.z0.glb.clouddn.com/fileList.png" alt="目录结构图"><br><strong>源代码下载</strong><br><a href="http://7xokxj.dl1.z0.glb.clouddn.com/codeDesign.tar.gz" target="_blank" rel="external">源码下载</a></p>
<h2 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h2><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><blockquote>
<p>这里我举了一个网页渲染时使用代理延迟加载图片的例子,用线程的睡眠模拟延迟加载,hibernate的延迟加载就是用了代理模式实现<br>代理模式的主要应用:</p>
<ol>
<li>远程代理,例如webservice</li>
<li>虚拟代理,html渲染</li>
<li>安全代理,控制真实对象的访问权限</li>
</ol>
<p>spring的AOP就是用的代理模式的思想设计实现的</p>
</blockquote>
<h3 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h3><p><img src="http://7xlqn0.com1.z0.glb.clouddn.com/proxy.png" alt="UML类图"></p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> codeDesign.proxy;</div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by kangbiao on 2015/11/22.</div><div class="line"> * 网页绘制接口,代理和被代理类均实现该接口</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Draw</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 绘制图片，需要花很多时间，使用代理来绘制</div><div class="line">     * <span class="doctag">@param</span> url</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">drawPicture</span><span class="params">(String url)</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">package</span> codeDesign.proxy;</div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by kangbiao on 2015/11/22.</div><div class="line"> * 绘制html网页的类（该类会消耗很多时间）</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HtmlDraw</span> <span class="keyword">implements</span> <span class="title">Draw</span></span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 该方法不耗时，不需要代理</div><div class="line">     * <span class="doctag">@param</span> text</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drawText</span><span class="params">(String text)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"正在绘制文字:"</span> + text);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 会消耗一定的时间，需要代理</div><div class="line">     * <span class="doctag">@param</span> url</div><div class="line">     */</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drawPicture</span><span class="params">(String url)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"图片区域正在从远程加载图片"</span>);</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            Thread.sleep(<span class="number">5000</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        System.out.println(<span class="string">"正在绘制图片:"</span>+url);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">package</span> codeDesign.proxy;</div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by kangbiao on 2015/11/22.</div><div class="line"> * 图片绘制代理类</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyDraw</span> <span class="keyword">implements</span> <span class="title">Draw</span> </span>&#123;</div><div class="line">    HtmlDraw htmlDraw;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ProxyDraw</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">this</span>.htmlDraw=<span class="keyword">new</span> HtmlDraw();</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drawPicture</span><span class="params">(String url)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"代理先输出一张占位图片"</span>);</div><div class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                htmlDraw.drawPicture(<span class="string">"1.jpg"</span>);</div><div class="line">                System.out.println(<span class="string">"代理去掉占位图片"</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;).start();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">package</span> codeDesign.proxy;</div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by kangbiao on 2015/11/22.</div><div class="line"> * 代理模式测试类</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyTest</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 该过程演示了网页的绘制过程，使用代理模式异步绘制网页上面的图片</div><div class="line">     * <span class="doctag">@param</span> args</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">        HtmlDraw htmlDraw=<span class="keyword">new</span> HtmlDraw();</div><div class="line">        htmlDraw.drawText(<span class="string">"文字1"</span>);</div><div class="line">        ProxyDraw proxyDraw=<span class="keyword">new</span> ProxyDraw();</div><div class="line">        proxyDraw.drawPicture(<span class="string">"1.jpg"</span>);</div><div class="line">        htmlDraw.drawText(<span class="string">"文字2"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h2><h3 id="说明-1"><a href="#说明-1" class="headerlink" title="说明"></a>说明</h3><blockquote>
<p>最基础的设计模式</p>
</blockquote>
<h3 id="类图-1"><a href="#类图-1" class="headerlink" title="类图"></a>类图</h3><p><img src="http://7xlqn0.com1.z0.glb.clouddn.com/factory.png" alt="工厂模式UML类图"></p>
<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> codeDesign.factory;</div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by kangbiao on 2015/11/21.</div><div class="line"> *</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Tea</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> String sugar;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mixSugarTea</span><span class="params">()</span></span>&#123;</div><div class="line">        System.out.print(<span class="string">"只有"</span>+sugar);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSugar</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> sugar;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSugar</span><span class="params">(String sugar)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">this</span>.sugar = sugar;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">package</span> codeDesign.factory;</div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by kangbiao on 2015/11/21.</div><div class="line"> * 蓝茶</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BlueTea</span> <span class="keyword">extends</span> <span class="title">Tea</span></span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mixSugarTea</span><span class="params">()</span></span>&#123;</div><div class="line">        System.out.print(<span class="keyword">super</span>.getSugar()+<span class="string">"蓝茶"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">package</span> codeDesign.factory;</div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by kangbiao on 2015/11/21.</div><div class="line"> * 红茶</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BlackTea</span> <span class="keyword">extends</span> <span class="title">Tea</span></span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mixSugarTea</span><span class="params">()</span></span>&#123;</div><div class="line">        System.out.print(<span class="keyword">super</span>.getSugar()+<span class="string">"红茶"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">package</span> codeDesign.factory;</div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by kangbiao on 2015/11/21.</div><div class="line"> * 茶的工厂类</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TeaFactory</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Tea <span class="title">getTea</span><span class="params">(String teaType)</span></span>&#123;</div><div class="line">        Tea tea;</div><div class="line">        <span class="keyword">switch</span> (teaType)&#123;</div><div class="line">            <span class="keyword">case</span> <span class="string">"black"</span>:</div><div class="line">                tea=<span class="keyword">new</span> BlackTea();</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> <span class="string">"blue"</span>:</div><div class="line">                tea=<span class="keyword">new</span> BlueTea();</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">default</span>:</div><div class="line">                tea=<span class="keyword">new</span> Tea();</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> tea;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">package</span> codeDesign.factory;</div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by kangbiao on 2015/11/21.</div><div class="line"> * 工厂模式测试</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FactoryTest</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">        Tea tea = TeaFactory.getTea(<span class="string">"black"</span>);</div><div class="line">        tea.setSugar(<span class="string">"红糖"</span>);</div><div class="line">        tea.mixSugarTea();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="装饰器模式"><a href="#装饰器模式" class="headerlink" title="装饰器模式"></a>装饰器模式</h2><h3 id="说明-2"><a href="#说明-2" class="headerlink" title="说明"></a>说明</h3><blockquote>
<ol>
<li>如果只有一个Concrete Component类而没有抽象的Component接口时，可以让Decorator继承Concrete Component。</li>
<li>如果只有一个Concrete Decorator类时，可以将Decorator和Concrete Decorator合并。</li>
<li>java的io流包就是使用的装饰器模式</li>
</ol>
</blockquote>
<h3 id="类图-2"><a href="#类图-2" class="headerlink" title="类图"></a>类图</h3><p><img src="http://7xlqn0.com1.z0.glb.clouddn.com/decorator.png" alt="装饰器模式UML类图"></p>
<h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> codeDesign.decorator;</div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by kangbiao on 2015/11/21.</div><div class="line"> * 汽车类</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showFunc</span><span class="params">()</span></span>&#123;</div><div class="line">        System.out.print(<span class="string">"组装完毕"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">package</span> codeDesign.decorator;</div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by kangbiao on 2015/11/21.</div><div class="line"> * 汽车的功能类</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Function</span> <span class="keyword">extends</span> <span class="title">Car</span></span>&#123;</div><div class="line">    <span class="keyword">protected</span> Car car;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addFuncs</span><span class="params">(Car car)</span></span>&#123;</div><div class="line">        <span class="keyword">this</span>.car=car;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showFunc</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">if</span> (car!=<span class="keyword">null</span>)&#123;</div><div class="line">            car.showFunc();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">package</span> codeDesign.decorator;</div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by kangbiao on 2015/11/21.</div><div class="line"> * 制动功能</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BrakingFunction</span> <span class="keyword">extends</span> <span class="title">Function</span></span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showFunc</span><span class="params">()</span></span>&#123;</div><div class="line">        System.out.print(<span class="string">"制动"</span>);</div><div class="line">        <span class="keyword">super</span>.showFunc();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">package</span> codeDesign.decorator;</div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by kangbiao on 2015/11/21.</div><div class="line"> * ABS防抱死功能</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ABSFunction</span> <span class="keyword">extends</span> <span class="title">Function</span></span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showFunc</span><span class="params">()</span></span>&#123;</div><div class="line">        System.out.print(<span class="string">"ABS"</span>);</div><div class="line">        <span class="keyword">super</span>.showFunc();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">package</span> codeDesign.decorator;</div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by kangbiao on 2015/11/21.</div><div class="line"> * 装饰模式测试</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DecoratorTest</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">        Car car=<span class="keyword">new</span> Car();</div><div class="line">        ABSFunction abs=<span class="keyword">new</span> ABSFunction();</div><div class="line">        BrakingFunction braking=<span class="keyword">new</span> BrakingFunction();</div><div class="line">        abs.addFuncs(car);</div><div class="line">        braking.addFuncs(abs);</div><div class="line">        braking.showFunc();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h2><h3 id="说明-3"><a href="#说明-3" class="headerlink" title="说明"></a>说明</h3><blockquote>
<p>这里我结合了工厂模式,使得加密算法的选择逻辑不用暴露给客户端<br>Strategy中定义了公共算法的实现接口,然后通过多态在Context动态的创建不同的实现类的实例从而达到算法策略选择逻辑<br>简化单元测试,因为每一个具体的实现都在一个类里面,可以分开测试<br>减少了算法调用类和算法实现类之间的耦合</p>
</blockquote>
<h3 id="类图-3"><a href="#类图-3" class="headerlink" title="类图"></a>类图</h3><p><img src="http://7xlqn0.com1.z0.glb.clouddn.com/strategy.png" alt="策略模式UML类图"></p>
<h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> codeDesign.strategy;</div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by kangbiao on 2015/11/21.</div><div class="line"> * 加密算法接口</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">EncryptStrategy</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 加密算法实现接口</div><div class="line">     * <span class="doctag">@param</span> rawString</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function">String <span class="title">doEncrypt</span><span class="params">(String rawString)</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">package</span> codeDesign.strategy;</div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by kangbiao on 2015/11/21.</div><div class="line"> * md5加密策略实现类</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MD5Strategy</span> <span class="keyword">implements</span> <span class="title">EncryptStrategy</span></span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">doEncrypt</span><span class="params">(String rawString)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"MD5("</span>+rawString+<span class="string">")"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">package</span> codeDesign.strategy;</div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by kangbiao on 2015/11/21.</div><div class="line"> * SHA1加密实现类</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SHA1Strategy</span> <span class="keyword">implements</span> <span class="title">EncryptStrategy</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">doEncrypt</span><span class="params">(String rawString)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"SHA1("</span>+rawString+<span class="string">")"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">package</span> codeDesign.strategy;</div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by kangbiao on 2015/11/21.</div><div class="line"> * 加密上下文维护类，客户端调用类</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EncryptContext</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> EncryptStrategy encryptStrategy;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">byte</span> MD5=<span class="number">0</span>;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">byte</span> SHA1=<span class="number">1</span>;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 这里实现用工厂模式实现自动装载不同的类</div><div class="line">     * <span class="doctag">@param</span> method</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">EncryptContext</span><span class="params">(Byte method)</span></span>&#123;</div><div class="line">        <span class="keyword">switch</span> (method)&#123;</div><div class="line">            <span class="keyword">case</span> MD5:</div><div class="line">                <span class="keyword">this</span>.encryptStrategy=<span class="keyword">new</span> MD5Strategy();</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> SHA1:</div><div class="line">                <span class="keyword">this</span>.encryptStrategy=<span class="keyword">new</span> SHA1Strategy();</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">default</span>:</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">doEncrypt</span><span class="params">(String rawString)</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> encryptStrategy.doEncrypt(rawString);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">package</span> codeDesign.strategy;</div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by kangbiao on 2015/11/21.</div><div class="line"> * 策略模式测试类</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EncryptTest</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">        EncryptContext encryptContext=<span class="keyword">new</span> EncryptContext(EncryptContext.MD5);</div><div class="line">        String result=encryptContext.doEncrypt(<span class="string">"123456"</span>);</div><div class="line">        System.out.print(result);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;学一样东西,自己另外举个例子实现一遍,才能知道里面的原理.记录一下学习的几种基本的设计模式&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;文件结构&quot;&gt;&lt;a href=&quot;#文件结构&quot; class=&quot;headerlink&quot; title=&quot;文件结构
    
    </summary>
    
      <category term="JAVA" scheme="http://kangbiao.org/categories/JAVA/"/>
    
    
      <category term="设计模式" scheme="http://kangbiao.org/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>IDEA15新特性</title>
    <link href="http://kangbiao.org/2015/11/17/idea-15-feature/"/>
    <id>http://kangbiao.org/2015/11/17/idea-15-feature/</id>
    <published>2015-11-17T12:20:50.000Z</published>
    <updated>2016-02-19T13:11:08.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Debug"><a href="#Debug" class="headerlink" title="Debug"></a>Debug</h2><ol>
<li>支持 Lambda 表达式 Debug ，之前版本只能使用推倒</li>
<li>Debug 时可强制方法 /表达式返回值</li>
</ol>
<h2 id="用户界面"><a href="#用户界面" class="headerlink" title="用户界面"></a>用户界面</h2><ol>
<li>测试 UI 提升，增加大量统计功能</li>
<li>“Find in Path”功能增加行内代码搜索</li>
<li>Run 的时候会出现小绿条，提示当前运行配置</li>
<li>增加对色弱 /色盲的配色支持</li>
<li>支持一键运行 /测试</li>
</ol>
<h2 id="编辑器"><a href="#编辑器" class="headerlink" title="编辑器"></a>编辑器</h2><ol>
<li>on-the-fly 冗余代码检测</li>
<li>表达式、返回值类型推断</li>
<li>可直接 encode 特殊的 HTML 字符，如 &gt; 会转换成 &gt;</li>
</ol>
<h2 id="语言"><a href="#语言" class="headerlink" title="语言"></a>语言</h2><ol>
<li>Kotlin 支持</li>
<li>Groovy 支持 2.3 版本中的 @Builder 注解</li>
<li>Scala 支持增强</li>
</ol>
<h2 id="框架"><a href="#框架" class="headerlink" title="框架"></a>框架</h2><ol>
<li>支持 Spring 4.2 特性</li>
<li>Spring Boot 支援更好，如 application.yml 、 initializer 提示与配置 </li>
<li>Grails 支持 3.X 版本</li>
<li>Arquilian &lt;- 我不懂是啥</li>
<li>Android 增加 Android Studio 1.3 的新特性</li>
</ol>
<h2 id="构建工具"><a href="#构建工具" class="headerlink" title="构建工具"></a>构建工具</h2><ol>
<li>Gradle/SBT &lt;- 引入时选择特定 modules</li>
</ol>
<h2 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h2><ol>
<li>TypeScript</li>
<li>React</li>
<li>AngularJS</li>
</ol>
<h2 id="版本控制"><a href="#版本控制" class="headerlink" title="版本控制"></a>版本控制</h2><ol>
<li>可直接在 Commit dialog 窗口中修改代码</li>
<li>支持 Rebase 功能</li>
<li>分支操作</li>
<li>Perforce 中的 Shelve （没用过）、 TFS 、 MQ 增强</li>
</ol>
<h2 id="数据库工具"><a href="#数据库工具" class="headerlink" title="数据库工具"></a>数据库工具</h2><blockquote>
<p>支持修改 Table 、多个查询窗口（终于支持了…）、执行计划（终于支持了…）</p>
</blockquote>
<h2 id="注册方法"><a href="#注册方法" class="headerlink" title="注册方法"></a>注册方法</h2><blockquote>
<p>注册码可以沿用14的,只是在 注册时选择 License server ，填 <a href="http://idea.lanyus.com" target="_blank" rel="external">http://idea.lanyus.com</a> ，然后点击 OK</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Debug&quot;&gt;&lt;a href=&quot;#Debug&quot; class=&quot;headerlink&quot; title=&quot;Debug&quot;&gt;&lt;/a&gt;Debug&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;支持 Lambda 表达式 Debug ，之前版本只能使用推倒&lt;/li&gt;
&lt;li&gt;Debug 时可强制方
    
    </summary>
    
      <category term="JAVA" scheme="http://kangbiao.org/categories/JAVA/"/>
    
    
      <category term="idea" scheme="http://kangbiao.org/tags/idea/"/>
    
  </entry>
  
  <entry>
    <title>bash基础复习</title>
    <link href="http://kangbiao.org/2015/11/17/bash-review/"/>
    <id>http://kangbiao.org/2015/11/17/bash-review/</id>
    <published>2015-11-17T01:40:44.000Z</published>
    <updated>2016-08-24T09:19:08.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><h3 id="用户自定义变量"><a href="#用户自定义变量" class="headerlink" title="用户自定义变量"></a>用户自定义变量</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">name=<span class="string">"kangbiao"</span> <span class="comment">#变量定义等号两边不能够有空格</span></div><div class="line"><span class="built_in">echo</span> <span class="variable">$name</span>      <span class="comment">#输出变量值,调用变量需要在变量前加$</span></div><div class="line"><span class="built_in">unset</span> name      <span class="comment">#删除name变量</span></div></pre></td></tr></table></figure>
<p>数组变量定义<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 可以不用declare -a 指定该变量为数组</span></div><div class="line">name[0]=<span class="string">"aaa"</span></div><div class="line">name[1]=<span class="string">"bbb"</span></div></pre></td></tr></table></figure></p>
<h3 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h3><blockquote>
<p>环境变量是全局变量,用户自定义变量是局部变量(对当前shell有效)<br>env 命令可以查看所有环境变量</p>
</blockquote>
<h3 id="语系变量"><a href="#语系变量" class="headerlink" title="语系变量"></a>语系变量</h3><blockquote>
<p>定义系统语言环境,注意linux shell是不支持中文的,只能通过插件实现终端支持中文<br>$LANG</p>
</blockquote>
<h3 id="位置参数变量"><a href="#位置参数变量" class="headerlink" title="位置参数变量"></a>位置参数变量</h3><blockquote>
<p>在脚本执行时获取用户输入参数</p>
</blockquote>
<table>
<thead>
<tr>
<th>位置变量</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>$n</td>
<td>n为数字,$0代表命令本身,$1-$9代表第一到第九个参数,十个以上${10}</td>
</tr>
<tr>
<td>$*</td>
<td>获取命令行中的所有参数,$*把所有的参数当做一个整体来看</td>
</tr>
<tr>
<td>$@</td>
<td>也是获取所有参数,不过把每个参数区别对待,可以for循环遍历</td>
</tr>
<tr>
<td>$#</td>
<td>代表命令行参数的个数</td>
</tr>
</tbody>
</table>
<h3 id="预定义变量"><a href="#预定义变量" class="headerlink" title="预定义变量"></a>预定义变量</h3><blockquote>
<p>可用于判断命令执行结果,以及结束自身进程等</p>
</blockquote>
<table>
<thead>
<tr>
<th>域定义变量</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>$?</td>
<td>最后一次命令执行后的返回结果,为0代表成功,非0代表失败</td>
</tr>
<tr>
<td>$$</td>
<td>当前进程的进程号(PID)</td>
</tr>
<tr>
<td>$!</td>
<td>后台运行的最后一个进程的进程号(PID)</td>
</tr>
</tbody>
</table>
<blockquote>
<p>read [选项] [变量名]<br>eg:read -p “please enter your name:” name</p>
</blockquote>
<h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><h3 id="declare-命令"><a href="#declare-命令" class="headerlink" title="declare 命令"></a>declare 命令</h3><blockquote>
<p>declare [+/-] [选项]</p>
<blockquote>
<p>+是取消属性,-是设定属性<br>eg:declare -a arr 将变量arr声明为数组型<br>eg:declare -i num 将变量num声明为整型</p>
</blockquote>
<p>declare -i var 可以实现数值运算</p>
<blockquote>
<p>eg:declare -i sum=num1+num2 num1和num2可以不是整型,会自动转换</p>
</blockquote>
<p>export 其实就是调用了declare命令将变量声明为环境变量</p>
</blockquote>
<h3 id="数值运算"><a href="#数值运算" class="headerlink" title="数值运算"></a>数值运算</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 方法一 声明法</span></div><div class="line">a=1</div><div class="line">b=2</div><div class="line"><span class="built_in">declare</span> -i c=<span class="variable">$a</span>+<span class="variable">$b</span></div><div class="line"><span class="comment"># 方法二</span></div><div class="line">c=$(expr <span class="variable">$a</span> + <span class="variable">$b</span>) <span class="comment"># 执行expr命令后将命令结果返回给c,单小括号是将系统命令执行结果赋给变量</span></div><div class="line"><span class="comment"># 方法三</span></div><div class="line">c=$((<span class="variable">$a</span>+<span class="variable">$b</span>)) <span class="comment">#推荐</span></div><div class="line">c=$[<span class="variable">$a</span>+<span class="variable">$b</span>] <span class="comment"># if判断语句使用的方法</span></div></pre></td></tr></table></figure>
<h2 id="环境变量配置文件"><a href="#环境变量配置文件" class="headerlink" title="环境变量配置文件"></a>环境变量配置文件</h2><h3 id="umask"><a href="#umask" class="headerlink" title="umask"></a>umask</h3><blockquote>
<p>准备知识:目录刚刚创建的最大权限是777,而文件刚创建时的权限是666,即任何用户都不能执行该文件</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">若<span class="built_in">umask</span>=022</div><div class="line">则新创建的文件权限为rw-rw-rw- 抵消掉相同的权限 ----w--w-  后为 rw-r--r--</div><div class="line">新创建的目录的权限为rwxrwxrwx抵消掉相同的权限----w--w- 后为 rwxr-xr-x</div></pre></td></tr></table></figure>
<blockquote>
<p>source file 加载环境变量配置文件</p>
</blockquote>
<h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><h2 id="条件判断和流程控制"><a href="#条件判断和流程控制" class="headerlink" title="条件判断和流程控制"></a>条件判断和流程控制</h2><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;变量&quot;&gt;&lt;a href=&quot;#变量&quot; class=&quot;headerlink&quot; title=&quot;变量&quot;&gt;&lt;/a&gt;变量&lt;/h2&gt;&lt;h3 id=&quot;用户自定义变量&quot;&gt;&lt;a href=&quot;#用户自定义变量&quot; class=&quot;headerlink&quot; title=&quot;用户自定义变量&quot;&gt;&lt;/
    
    </summary>
    
      <category term="服务器" scheme="http://kangbiao.org/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    
      <category term="bash" scheme="http://kangbiao.org/tags/bash/"/>
    
      <category term="shell" scheme="http://kangbiao.org/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>javaweb基础复习</title>
    <link href="http://kangbiao.org/2015/11/14/javaweb-review/"/>
    <id>http://kangbiao.org/2015/11/14/javaweb-review/</id>
    <published>2015-11-14T08:30:00.000Z</published>
    <updated>2016-04-10T13:32:40.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="JSP"><a href="#JSP" class="headerlink" title="JSP"></a>JSP</h2><h3 id="JSP指令标识"><a href="#JSP指令标识" class="headerlink" title="JSP指令标识"></a>JSP指令标识</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">基本格式:<span class="tag">&lt;<span class="name">%@</span> 指令名 属性<span class="attr">1</span>=<span class="string">""</span> 属性<span class="attr">2</span>=<span class="string">""</span>  %&gt;</span></div><div class="line">page指令:<span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">language</span>=<span class="string">""</span> <span class="attr">contentType</span>=<span class="string">"text/html; charset=UTF-8"</span> %&gt;</span> 每个jsp必须有的标识</div><div class="line">include指令:<span class="tag">&lt;<span class="name">%@</span> <span class="attr">include</span> <span class="attr">file</span>=<span class="string">"jspFilePath"</span> %&gt;</span> 可用于包含其他文件</div><div class="line">标签库指令(taglib):<span class="tag">&lt;<span class="name">%@</span> <span class="attr">taglib</span> <span class="attr">prefix</span>=<span class="string">""</span> <span class="attr">uri</span>=<span class="string">""</span> %&gt;</span> ,引入该指令后可以扩展jsp文件的标签,简化jsp文件内容,常用的标签库有JSTL,SPRING,STRUCTS等.</div></pre></td></tr></table></figure>
<h3 id="JSP动作标识"><a href="#JSP动作标识" class="headerlink" title="JSP动作标识"></a>JSP动作标识</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">基本格式:<span class="tag">&lt;<span class="name">标识名</span> 属性<span class="attr">1</span>=<span class="string">""</span> 属性<span class="attr">2</span>=<span class="string">""</span>/&gt;</span> (支持嵌套标签)</div><div class="line"><span class="tag">&lt;<span class="name">jsp:include</span> <span class="attr">page</span>=<span class="string">"静态或者动态文件的路径"</span> <span class="attr">flush</span>=<span class="string">"true|false"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">jsp:forward</span> <span class="attr">page</span>=<span class="string">"重定向的目标文件地址"</span> /&gt;</span>  外部重定向标签,将用户请求重定向到指定页面</div><div class="line"><span class="tag">&lt;<span class="name">jsp:param</span> <span class="attr">name</span>=<span class="string">"参数名"</span> <span class="attr">value</span>=<span class="string">"参数值"</span> /&gt;</span>  作为其他动作标识的子标识.为其他标识传递参数</div><div class="line"><span class="tag">&lt;<span class="name">jsp:useBean</span> /&gt;</span></div></pre></td></tr></table></figure>
<h2 id="内置对象"><a href="#内置对象" class="headerlink" title="内置对象"></a>内置对象</h2><blockquote>
<p>java内置对象为什么不需要实例化?因为jsp文件在被解析成一个servlet后会在其java文件里通过工厂方法获取到对应对象的实例<br>所以jsp内置对象只是隐示的不需要实例化相应的对象.因为web容器能够自动实例化<a href="http://www.mamicode.com/info-detail-518906.html" target="_blank" rel="external">参考资料</a><br>request , response , session , application , out , page , config , exception , pageContext</p>
</blockquote>
<h3 id="特殊说明"><a href="#特殊说明" class="headerlink" title="特殊说明"></a>特殊说明</h3><blockquote>
<p>session.invalidata()方法销毁session会话,session.removeAttribute()只是移除属性<br>application对象作用域为应用程序全局,可用于统计网站访问量,也可以通过getInitParameter(String name)方法获取web应用配置信息<br>config对象主要用来获取web.xml中的配置信息,功能和application有所重复</p>
</blockquote>
<h3 id="简单应用"><a href="#简单应用" class="headerlink" title="简单应用"></a>简单应用</h3><blockquote>
<p>通过request.getHeader(“referer)获取请求源地址后与服务器主机地址做对比可以简单的防止跨域提交</p>
</blockquote>
<h2 id="servlet"><a href="#servlet" class="headerlink" title="servlet"></a>servlet</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><blockquote>
<p>servlet是一个标准,是java servlet API的实现和相关类的方法的组合,由web容器创建并管理其生命周期<br>servlet的两种配置方式:注解配置和web.xml文件配置<br>servlet作为业务逻辑层,将jsp中的请求响应对象放入servlet中,可以更好的将web应用分层,提高其可维护性</p>
</blockquote>
<h3 id="servlet过滤器"><a href="#servlet过滤器" class="headerlink" title="servlet过滤器"></a>servlet过滤器</h3><blockquote>
<p>定义一个实现Filter类的过滤器类即可<br>过滤器的两种配置方式:基于注解配置(在Filter实现类上加@urlPatterns={“/*”})或者在web.xml文件中配置<br>应用:登陆过滤,字符编码过滤,个性化过滤</p>
</blockquote>
<h3 id="servlet监听器"><a href="#servlet监听器" class="headerlink" title="servlet监听器"></a>servlet监听器</h3><blockquote>
<p>监听web容器的有效期时间,由容器管理</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;JSP&quot;&gt;&lt;a href=&quot;#JSP&quot; class=&quot;headerlink&quot; title=&quot;JSP&quot;&gt;&lt;/a&gt;JSP&lt;/h2&gt;&lt;h3 id=&quot;JSP指令标识&quot;&gt;&lt;a href=&quot;#JSP指令标识&quot; class=&quot;headerlink&quot; title=&quot;JSP指令标识
    
    </summary>
    
      <category term="JAVA" scheme="http://kangbiao.org/categories/JAVA/"/>
    
    
      <category term="j2ee" scheme="http://kangbiao.org/tags/j2ee/"/>
    
  </entry>
  
</feed>
